/* alikeTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. alikeTokenManager.java */
package traductor;

/** Token Manager. */
public class alikeTokenManager implements alikeConstants {
        static void CommonTokenAction(Token t) {
                String kind = "";
                switch (t.kind) {
                        case tNUM:    kind = "constante entera"; break;
                        case tCONST_CHAR: kind = "constante car\u00e1cter"; break;
                        case tCONST_STRING: kind = "constante string"; break;
                        case tID:         kind = "identificador"; break;
                        case tASSIGN: kind = "operador asignaci\u00f3n"; break;
                        case tAND: case tOR: case tNOT: case tEQ: case tNEQ: case tLT: case tLE: case tGT: case tGE:
                                                  kind = "operador l\u00f3gico"; break;
                        case tPLUS: case tMINUS: case tMULT: case tDIV: case tMOD:
                                                  kind = "operador aritm\u00e9tico"; break;
                        case tBOOL: case tCHAR: case tINT:
                                                  kind = "palabra reservada"; break;
                        case tCOMMENT: kind = "comentario"; break;
                        case tCOMMA: case tSEMICOLON: case tCOLON: kind = "separador"; break;
                        case tLPAREN: case tRPAREN: kind = "par\u00e9ntesis"; break;

                        case tIF: case tTHEN: case tELSE: case tELSIF: case tENDIF:
                        case tWHILE: case tLOOP: case tENDLOOP:
                        case tPROCEDURE: case tREF: case tFUNCTION: case tIS: case tBEGIN: case tEND: case tRETURN:
                        case tARRAY: case tARRAY_OF: case tRANGE:
                                                  kind = "token"; break;

                        case tPUT: case tPUT_LINE: case tGET: case tSKIP_LINE: case tINT2CHAR: case tCHAR2INT: case tEXIT:
                                kind = "funci\u00f3n est\u00e1ndar"; break;

                        case EOF: kind = "Fin de fichero"; break;

                        default:          kind = "ERROR"; break;
                }

                if (kind != "ERROR") System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " + kind + " \"" + t.image + "\"");
                else                             System.out.println("ERROR L\u00c9XICO: (" + t.beginLine + "," + t.beginColumn + "): s\u00edmbolo no reconocido: \"" + t.image + "\"");
        }

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x801c3fefffff00L) != 0L)
         {
            jjmatchedKind = 57;
            return 14;
         }
         if ((active0 & 0x10000000000000L) != 0L)
            return 10;
         return -1;
      case 1:
         if ((active0 & 0x80008404000L) != 0L)
            return 14;
         if ((active0 & 0x80143fe7bfbf00L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 1;
            return 14;
         }
         return -1;
      case 2:
         if ((active0 & 0x801400e1242000L) != 0L)
            return 14;
         if ((active0 & 0x3f069b9f00L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 57;
               jjmatchedPos = 2;
            }
            return 14;
         }
         return -1;
      case 3:
         if ((active0 & 0x1800029000L) != 0L)
            return 14;
         if ((active0 & 0x2746990f00L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 3;
            return 14;
         }
         return -1;
      case 4:
         if ((active0 & 0x2004810800L) != 0L)
            return 14;
         if ((active0 & 0x742180700L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 4;
            return 14;
         }
         return -1;
      case 5:
         if ((active0 & 0x740180700L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 5;
            return 14;
         }
         if ((active0 & 0x2000000L) != 0L)
            return 14;
         return -1;
      case 6:
         if ((active0 & 0x500L) != 0L)
            return 14;
         if ((active0 & 0x740180200L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 6;
            return 14;
         }
         return -1;
      case 7:
         if ((active0 & 0x640100000L) != 0L)
            return 14;
         if ((active0 & 0x100080200L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
            return 14;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 58);
      case 10:
         return jjStopAtPos(0, 58);
      case 13:
         return jjStopAtPos(0, 58);
      case 32:
         return jjStopAtPos(0, 58);
      case 40:
         return jjStopAtPos(0, 6);
      case 41:
         return jjStopAtPos(0, 7);
      case 42:
         return jjStopAtPos(0, 53);
      case 43:
         return jjStopAtPos(0, 51);
      case 44:
         return jjStopAtPos(0, 5);
      case 45:
         return jjStartNfaWithStates_0(0, 52, 10);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x10000000L);
      case 47:
         jjmatchedKind = 54;
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 58:
         jjmatchedKind = 4;
         return jjMoveStringLiteralDfa1_0(0x20000000000L);
      case 59:
         return jjStopAtPos(0, 3);
      case 60:
         jjmatchedKind = 47;
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 61:
         return jjStopAtPos(0, 45);
      case 62:
         jjmatchedKind = 49;
         return jjMoveStringLiteralDfa1_0(0x4000000000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x40004000000L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x800400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x400000200L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x801072000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x2000100000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa1_0(0x80000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x200404100L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x80000000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x80008000000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x60080000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2200000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x100000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x1000008000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x800L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 46:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      case 61:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 50);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x82a00000L);
      case 70:
      case 102:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 14);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(1, 27, 14);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x400008a00L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x40201042100L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x80100000001400L);
      case 82:
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 14);
         return jjMoveStringLiteralDfa2_0(active0, 0x1004080000L);
      case 83:
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(1, 22, 14);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x60100000L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000200L);
      case 68:
      case 100:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 42, 14);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 55, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x42000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 70:
      case 102:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 14);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x900000800L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x81400L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x30000L);
      case 84:
      case 116:
         if ((active0 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 29;
            jjmatchedPos = 2;
         }
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(2, 31, 14);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 44, 14);
         return jjMoveStringLiteralDfa3_0(active0, 0x242000100L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa4_0(active0, 0x42000L);
      case 50:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000L);
      case 95:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x180000L);
      case 69:
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 14);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x810000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00L);
      case 78:
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 14);
         break;
      case 80:
      case 112:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(3, 12, 14);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 84:
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 14);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 50:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x200L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 69:
      case 101:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(4, 11, 14);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 37, 14);
         return jjMoveStringLiteralDfa5_0(active0, 0x80400L);
      case 70:
      case 102:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 14);
         break;
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x100L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x40002000L);
      case 78:
      case 110:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(4, 23, 14);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 89:
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 26, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x200L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L);
      case 70:
      case 102:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x440100000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 78:
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 14);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000L);
      case 78:
      case 110:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 10, 14);
         return jjMoveStringLiteralDfa7_0(active0, 0x440000000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x102000L);
      case 82:
      case 114:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(6, 8, 14);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x200L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(7, 30, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x200L);
      case 78:
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000L);
      case 80:
      case 112:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(7, 13);
         break;
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 33, 14);
         return jjMoveStringLiteralDfa8_0(active0, 0x80000L);
      case 84:
      case 116:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(7, 34, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(8, 19, 14);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(8, 32, 14);
         break;
      case 82:
      case 114:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(8, 9, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  else if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 45)
                     { jjCheckNAdd(1); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 38)
                        kind = 38;
                     { jjCheckNAdd(1); }
                  }
                  else if (curChar == 45)
                  {
                     if (kind > 56)
                        kind = 56;
                     { jjCheckNAdd(11); }
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 38)
                     kind = 38;
                  { jjCheckNAdd(1); }
                  break;
               case 2:
                  if (curChar == 39)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 3:
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 4:
                  if (curChar == 39 && kind > 39)
                     kind = 39;
                  break;
               case 5:
               case 7:
                  if (curChar == 34)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 6:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 8:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 34 && kind > 40)
                     kind = 40;
                  break;
               case 11:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 56)
                     kind = 56;
                  { jjCheckNAdd(11); }
                  break;
               case 12:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 14:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 57)
                     kind = 57;
                  { jjCheckNAdd(14); }
                  break;
               case 3:
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  { jjAddStates(0, 2); }
                  break;
               case 11:
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 11:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 56)
                     kind = 56;
                  jjstateSet[jjnewStateCnt++] = 11;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, "\73", "\72", "\54", "\50", "\51", null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\56\56", null, null, null, null, null, null, null, null, null, null, 
null, null, "\72\75", null, null, null, "\75", "\57\75", "\74", "\74\75", "\76", 
"\76\75", "\53", "\55", "\52", "\57", null, null, null, null, null, null, null, null, };
static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   6, 8, 9, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      CommonTokenAction(matchedToken);
      return matchedToken;
   }

   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedPos == 0 && jjmatchedKind > 58)
   {
      jjmatchedKind = 58;
   }
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         CommonTokenAction(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public alikeTokenManager(SimpleCharStream stream){

      if (input_stream != null)
        throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);

    input_stream = stream;
  }

  /** Constructor. */
  public alikeTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  static public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  static private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  static public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public static void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x7fffffffffffff9L, 
};
static final long[] jjtoSkip = {
   0x7800000000000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    static protected SimpleCharStream  input_stream;

    static private final int[] jjrounds = new int[15];
    static private final int[] jjstateSet = new int[2 * 15];
    private static final StringBuilder jjimage = new StringBuilder();
    private static StringBuilder image = jjimage;
    private static int jjimageLen;
    private static int lengthOfMatch;
    static protected int curChar;
}
