/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

public class alike implements alikeConstants {
   //...

   public static void main(String[] args) {
           alike parser = null;

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el símbolo inicial de la gramática
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                // Tiene que quedar el mensaje así
                // ERROR LÉXICO: (<línea, columna>): símbolo no reconocido: <símbolo>
                   System.err.println("TokenMgrError: " + e.getMessage());
           }
           catch (ParseException e) {
                   System.err.println("PARSER_ERROR: " + e.getMessage());
           }

           //...
   }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
  static final public void Programa() throws ParseException {Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSEMICOLON:
      case tCOLON:
      case tCOMMA:
      case tLPAREN:
      case tRPAREN:
      case tINT:
      case tCHAR:
      case tBOOL:
      case tWHILE:
      case tLOOP:
      case tENDLOOP:
      case tIF:
      case tTHEN:
      case tELSIF:
      case tELSE:
      case tENDIF:
      case tPROCEDURE:
      case tFUNCTION:
      case tREF:
      case tIS:
      case tBEGIN:
      case tEND:
      case tRETURN:
      case tARRAY:
      case tARRAY_OF:
      case tRANGE:
      case tPUT:
      case tPUT_LINE:
      case tGET:
      case tSKIP_LINE:
      case tINT2CHAR:
      case tCHAR2INT:
      case tEXIT:
      case tTRUE:
      case tFALSE:
      case tNUM:
      case tCONST_CHAR:
      case tCONST_STRING:
      case tASSIGN:
      case tAND:
      case tOR:
      case tNOT:
      case tEQ:
      case tNEQ:
      case tLT:
      case tLE:
      case tGT:
      case tGE:
      case tPLUS:
      case tMINUS:
      case tMULT:
      case tDIV:
      case tMOD:
      case tCOMMENT:
      case tID:
      case UNEXPECTED_TOKEN:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSEMICOLON:{
        jj_consume_token(tSEMICOLON);
        break;
        }
      case tCOMMA:{
        jj_consume_token(tCOMMA);
        break;
        }
      case tCOLON:{
        jj_consume_token(tCOLON);
        break;
        }
      case tLPAREN:{
        jj_consume_token(tLPAREN);
        break;
        }
      case tRPAREN:{
        jj_consume_token(tRPAREN);
        break;
        }
      case tBOOL:{
        jj_consume_token(tBOOL);
        break;
        }
      case tCHAR:{
        jj_consume_token(tCHAR);
        break;
        }
      case tINT:{
        jj_consume_token(tINT);
        break;
        }
      case tWHILE:{
        jj_consume_token(tWHILE);
        break;
        }
      case tLOOP:{
        jj_consume_token(tLOOP);
        break;
        }
      case tENDLOOP:{
        jj_consume_token(tENDLOOP);
        break;
        }
      case tIF:{
        jj_consume_token(tIF);
        break;
        }
      case tELSE:{
        jj_consume_token(tELSE);
        break;
        }
      case tTHEN:{
        jj_consume_token(tTHEN);
        break;
        }
      case tELSIF:{
        jj_consume_token(tELSIF);
        break;
        }
      case tENDIF:{
        jj_consume_token(tENDIF);
        break;
        }
      case tPROCEDURE:{
        jj_consume_token(tPROCEDURE);
        break;
        }
      case tREF:{
        jj_consume_token(tREF);
        break;
        }
      case tFUNCTION:{
        jj_consume_token(tFUNCTION);
        break;
        }
      case tIS:{
        jj_consume_token(tIS);
        break;
        }
      case tBEGIN:{
        jj_consume_token(tBEGIN);
        break;
        }
      case tEND:{
        jj_consume_token(tEND);
        break;
        }
      case tRETURN:{
        jj_consume_token(tRETURN);
        break;
        }
      case tARRAY:{
        jj_consume_token(tARRAY);
        break;
        }
      case tARRAY_OF:{
        jj_consume_token(tARRAY_OF);
        break;
        }
      case tRANGE:{
        jj_consume_token(tRANGE);
        break;
        }
      case tPUT:{
        jj_consume_token(tPUT);
        break;
        }
      case tPUT_LINE:{
        jj_consume_token(tPUT_LINE);
        break;
        }
      case tGET:{
        jj_consume_token(tGET);
        break;
        }
      case tSKIP_LINE:{
        jj_consume_token(tSKIP_LINE);
        break;
        }
      case tINT2CHAR:{
        jj_consume_token(tINT2CHAR);
        break;
        }
      case tCHAR2INT:{
        jj_consume_token(tCHAR2INT);
        break;
        }
      case tEXIT:{
        jj_consume_token(tEXIT);
        break;
        }
      case tTRUE:{
        jj_consume_token(tTRUE);
        break;
        }
      case tFALSE:{
        jj_consume_token(tFALSE);
        break;
        }
      case tNUM:{
        jj_consume_token(tNUM);
        break;
        }
      case tCONST_CHAR:{
        jj_consume_token(tCONST_CHAR);
        break;
        }
      case tCONST_STRING:{
        jj_consume_token(tCONST_STRING);
        break;
        }
      case tASSIGN:{
        jj_consume_token(tASSIGN);
        break;
        }
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      case tNOT:{
        jj_consume_token(tNOT);
        break;
        }
      case tEQ:{
        jj_consume_token(tEQ);
        break;
        }
      case tNEQ:{
        jj_consume_token(tNEQ);
        break;
        }
      case tLT:{
        jj_consume_token(tLT);
        break;
        }
      case tLE:{
        jj_consume_token(tLE);
        break;
        }
      case tGT:{
        jj_consume_token(tGT);
        break;
        }
      case tGE:{
        jj_consume_token(tGE);
        break;
        }
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      case tMULT:{
        jj_consume_token(tMULT);
        break;
        }
      case tDIV:{
        jj_consume_token(tDIV);
        break;
        }
      case tMOD:{
        jj_consume_token(tMOD);
        break;
        }
      case tCOMMENT:{
        jj_consume_token(tCOMMENT);
        break;
        }
      case tID:{
        jj_consume_token(tID);
        break;
        }
      case UNEXPECTED_TOKEN:{
        jj_consume_token(UNEXPECTED_TOKEN);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfffffff8,0xfffffff8,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x7ffffff,0x7ffffff,};
	}

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[63];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 63; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
