//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = true;
}

PARSER_BEGIN(alike)

package traductor;

//...

public class alike {
   //...
   
   public static void main(String[] args) {
	   alike parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el s√≠mbolo inicial de la gram√°tica
		   parser.Programa();
		   //...
		   System.out.println("***** An√°lisis terminado con √©xito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		// Tiene que quedar el mensaje as√≠
		// ERROR L√âXICO: (<l√≠nea, columna>): s√≠mbolo no reconocido: <s√≠mbolo>
		   System.err.println("ERROR L√âXICO: " + e.getMessage());
	   }
	   catch (ParseException e) {
		   System.err.println("PARSER_ERROR: " + e.getMessage());
	   }
	   
	   //...
   }
}
PARSER_END(alike)

//---------------------------------------------------------
TOKEN_MGR_DECLS : {
	static void CommonTokenAction(Token t) {
		String kind = "";
		switch (t.kind) {
			case tNUM:    kind = "constante entera"; break;
			case tID:	  kind = "identificador"; break;
			case tASSIGN: kind = "operador asignaci√≥n"; break;
			case tAND: case tOR: case tNOT: case tEQ: case tNEQ: case tLT: case tLE: case tGT: case tGE:
						  kind = "operador l√≥gico"; break;
			case tPLUS: case tMINUS: case tMULT: case tDIV: case tMOD:
						  kind = "operador aritm√©tico"; break;
			case tBOOL: case tCHAR: case tINT:
						  kind = "palabra reservada"; break;
			case tCOMMENT: kind = "comentario"; break;
			case tNEWLINE: kind = "salto de l√≠nea"; break;
			case tCOMMA: case tSEMICOLON: kind = "separador"; break;
			case tIF: case tELSE: case tELSIF: case tENDIF: case tTHEN: case tWHILE: case tLOOP: case tENDLOOP: case tBEGIN: case tEND: case tRETURN: case tPROCEDURE: case tFUNCTION: case tIS:
						  kind = "token"; break;
						  
			default: 	  kind = "ERROR"; break;
		}

		if (kind != "ERROR") System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " + kind + " \"" + t.image + "\"");
		else 				 System.out.println("ERROR L√âXICO: (" + t.beginLine + "," + t.beginColumn + "): s√≠mbolo no reconocido: \"" + t.image + "\"");

	}
}

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|	< tSEMICOLON: ";" >
|	< tCOMMA: "," >
|   < tSIMPLE_QUOTE: "'" >
|	< tNEWLINE: ("\n" | "\r" | "\n\r" ) >

	// Tipos de datos
|	< tINT: "integer" >
|	< tCHAR: "character" >
|	< tBOOL: "boolean" >
// üéÉüëáüèº esto ir√≠a en an√°lisis sint√°ctico, la especificaci√≥n de que vaya entre colillas simples
// |   < tCHAR: "'" (~["'","\n","\r"])* "'" > 


	// Palabras reservadas para bloques de c√≥digo estructurados
|	< tWHILE: "while" > 
|   < tLOOP: "loop" >
|	< tENDLOOP: "end loop" >
|	< tIF: "if" >
|	< tTHEN: "then" >
|	< tELSIF: "elsif" >
|	< tELSE: "else" >
|	< tENDIF: "end if" >

|   < tPROCEDURE: "procedure" >
|   < tFUNCTION: "function" >
|   < tIS: "is" >
|   < tBEGIN: "begin" >
|   < tEND: "end" >
|	< tRETURN: "return" > 

	// Literales
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tNUM: ("-")? (<DIGIT>)+ > 

	// Operadores
|	< tASSIGN: ":=" > 
	
|	< tAND: "&&" >
|	< tOR: "||" >
|	< tNOT: "!" >
|	< tEQ: "=" >
|	< tNEQ: "!=" >
|	< tLT: "<" >
|	< tLE: "<=" >
|	< tGT: ">" >
|	< tGE: ">=" >
|	< tPLUS: "+" >
|	< tMINUS: "-" >
|	< tMULT: "*" >
|	< tDIV: "/" >
|	< tMOD: "mod" >


	// Otros

// comment es cualquier cosa detr√°s de "--" hasta finial de l√≠nea
| 	< tCOMMENT: "--" (~["\n","\r"])* ("\n")>
|	< tID: (<LETTER> | "_") (<LETTER>|<DIGIT>|"_")* >

|  	< #ANY : (~[])+ >
}

SKIP : { " " | "\t" }

// < * > TOKEN :
// {
//   < UNEXPECTED_TOKEN : (~[])+ >
// }

//------------ S√≠mbolo inicial de la gram√°tica. Para an√°lisis l√©xico no hace falta m√°s
void Programa() : 
{
	Token t;
}
{
   ( 
	   < tBOOL > | < tCHAR > | <tINT> | <tIF> | <tELSE> | <tID>
	   | <tNUM> | <tASSIGN> | <tAND> | <tOR> | <tNOT> | <tEQ> 
	   | <tNEQ> | <tLT> | <tLE> | <tGT> | <tGE> | <tPLUS> | <tMINUS> 
	   | <tMULT> | <tDIV> | <tMOD> | <tPROCEDURE> | <tFUNCTION> | <tIS> 
	   | <tBEGIN> | <tEND> | <tRETURN> | <tWHILE> | <tLOOP> | <tENDLOOP> 
	   | <tTHEN> | <tELSIF> | <tENDIF> | <tTRUE> | <tFALSE> 
	   | <tCOMMENT> | <tSEMICOLON> | <tCOMMA> | <tSIMPLE_QUOTE> | <tNEWLINE>
   )* 
   < EOF >
}
