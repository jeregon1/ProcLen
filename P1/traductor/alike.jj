//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	COMMON_TOKEN_ACTION = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(alike)

package traductor;

public class alike {
   //...
   
   public static void main(String[] args) {
	   alike parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el símbolo inicial de la gramática
		   parser.Programa();
		   //...
		   System.out.println("***** Análisis terminado con éxito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		// Tiene que quedar el mensaje así
		// ERROR LÉXICO: (<línea, columna>): símbolo no reconocido: <símbolo>
		   System.err.println("TokenMgrError: " + e.getMessage());
	   }
	   catch (ParseException e) {
		   System.err.println("PARSER_ERROR: " + e.getMessage());
	   }
	   
	   //...
   }
}
PARSER_END(alike)

//---------------------------------------------------------
TOKEN_MGR_DECLS : {
	static void CommonTokenAction(Token t) {
		String kind = "";
		switch (t.kind) {
			case tNUM:    kind = "constante entera"; break;
			case tCONST_CHAR: kind = "constante carácter"; break;
			case tCONST_STRING: kind = "constante string"; break;
			case tID:	  kind = "identificador"; break;
			case tASSIGN: kind = "operador asignación"; break;
			case tAND: case tOR: case tNOT: case tEQ: case tNEQ: case tLT: case tLE: case tGT: case tGE:
						  kind = "operador lógico"; break;
			case tPLUS: case tMINUS: case tMULT: case tDIV: case tMOD:
						  kind = "operador aritmético"; break;
			case tBOOL: case tCHAR: case tINT:
						  kind = "palabra reservada"; break;
			case tCOMMENT: kind = "comentario"; break;
			case tCOMMA: case tSEMICOLON: case tCOLON: kind = "separador"; break;
			case tLPAREN: case tRPAREN: kind = "paréntesis"; break;

			case tIF: case tTHEN: case tELSE: case tELSIF: case tENDIF: 
			case tWHILE: case tLOOP: case tENDLOOP: 
			case tPROCEDURE: case tREF: case tFUNCTION: case tIS: case tBEGIN: case tEND: case tRETURN:
			case tARRAY: case tARRAY_OF: case tRANGE:
						  kind = "token"; break;

			case tPUT: case tPUT_LINE: case tGET: case tSKIP_LINE: case tINT2CHAR: case tCHAR2INT: case tEXIT:
				kind = "función estándar"; break;

			case EOF: kind = "Fin de fichero"; break;
						  
			default: 	  kind = "ERROR"; break;
		}

		if (kind != "ERROR") System.out.println("(" + t.beginLine + "," + t.beginColumn + "): " + kind + " \"" + t.image + "\"");
		else 				 System.out.println("ERROR LÉXICO: (" + t.beginLine + "," + t.beginColumn + "): símbolo no reconocido: \"" + t.image + "\"");
	}
}

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >

	// Separadores
|	< tSEMICOLON: ";" >
|	< tCOLON: ":" >
|	< tCOMMA: "," >

	// Delimitadores
|	< tLPAREN: "(" >
|	< tRPAREN: ")" >

	// Tipos de datos
|	< tINT: "integer" >
|	< tCHAR: "character" >
|	< tBOOL: "boolean" >

	// Palabras reservadas
|	< tWHILE: "while" > 
|   < tLOOP: "loop" >
|	< tENDLOOP: "end loop" >
|	< tIF: "if" >
|	< tTHEN: "then" >
|	< tELSIF: "elsif" >
|	< tELSE: "else" >
|	< tENDIF: "end if" >

|   < tPROCEDURE: "procedure" >
|   < tFUNCTION: "function" >
|   < tREF: "ref" >
|   < tIS: "is" >
|   < tBEGIN: "begin" >
|   < tEND: "end" >
|	< tRETURN: "return" > 

|   < tARRAY: "array" >
| 	< tARRAY_OF: "of" >
|	< tRANGE: ".." >

	// Funciones estándar
| 	< tPUT: "put" >
| 	< tPUT_LINE: "put_line" >
|	< tGET: "get" >
|	< tSKIP_LINE: "skip_line" >
|	< tINT2CHAR: "int2char" >
|	< tCHAR2INT: "char2int" >
|	< tEXIT: "exit" >

	// Literales
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tNUM: ("-")? (<DIGIT>)+ >
|	< tCONST_CHAR: "'"~[]"'" >
|	< tCONST_STRING: "\"" ((~["\""] | "\"\""))* "\"" > // Dos comillas dobles seguidas se consideran una comilla doble

	// Operadores
|	< tASSIGN: ":=" > 
|	< tAND: "and" >
|	< tOR: "or" >
|	< tNOT: "not" >
|	< tEQ: "=" >
|	< tNEQ: "/=" >
|	< tLT: "<" >
|	< tLE: "<=" >
|	< tGT: ">" >
|	< tGE: ">=" >
|	< tPLUS: "+" >
|	< tMINUS: "-" >
|	< tMULT: "*" >
|	< tDIV: "/" >
|	< tMOD: "mod" >

	// Otros
|   < tCOMMENT: "--" (~["\n", "\r"])* >
|	< tID: (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")* >

}

SKIP : { " " | "\t" | "\n" | "\r" }

//------------ Símbolo inicial de la gramática. Para análisis léxico no hace falta más
void Programa() : 
{
	Token t;
}
{
   ( 
	   <tSEMICOLON> |<tCOMMA> | <tCOLON> 
	   | <tLPAREN> | <tRPAREN> 
	   | < tBOOL > | < tCHAR > | <tINT> 
	   | <tWHILE> | <tLOOP> | <tENDLOOP> | <tIF> | <tELSE>  | <tTHEN> | <tELSIF> | <tENDIF> 
	   | <tPROCEDURE> | <tREF> | <tFUNCTION> | <tIS> | <tBEGIN> | <tEND> | <tRETURN> 
	   | <tARRAY> | <tARRAY_OF> | <tRANGE>
	   | <tPUT> | <tPUT_LINE> | <tGET> | <tSKIP_LINE> | <tINT2CHAR> | <tCHAR2INT> | <tEXIT>
	   | <tTRUE> | <tFALSE> | <tNUM> | <tCONST_CHAR> | <tCONST_STRING> 
	   | <tASSIGN> | <tAND> | <tOR> | <tNOT> | <tEQ> | <tNEQ> | <tLT> 
	   | <tLE> | <tGT> | <tGE> | <tPLUS> | <tMINUS> | <tMULT> | <tDIV> | <tMOD>
	   | <tCOMMENT> | <tID> 
	   
   )* 
   < EOF >
}
