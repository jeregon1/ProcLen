/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.SemanticFunctions.SemanticFunctions;

import java.util.List;
import java.util.ArrayList;

public class alike implements alikeConstants {
        // Tabla de s칤mbolos global
        static SymbolTable st;
        static SemanticFunctions semantic;


        // Variable global necesaria para controlar la derivabilidad de la instrucci칩n 'return' 
        // dependiendo de si nos encontramos en una funci칩n o en un procedimiento. 
        static boolean inFunction = false;
        // Estructura de datos para guardar en orden FIFO los tipos de retorno de las funciones 游꾺
        // static Queue<Symbol.Types> returnTypes = new LinkedList<>();

        public static void main(String[] args) {
                alike parser = null;

                st = new SymbolTable();
                semantic = new SemanticFunctions(st);

                try {
                        if(args.length == 0) {
                                parser = new alike(System.in);
                        }
                        else {
                                parser = new alike(new java.io.FileInputStream(args[0]));
                        }
                        //Programa es el s칤mbolo inicial de la gram치tica
                        parser.Programa();

                        if (!semantic.hayErrores())
                                System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
                        else
                                System.out.println("Detectados errores sem\u00e1nticos. No se genera c\u00f3digo.");
                }
                catch (java.io.FileNotFoundException e) {
                        System.err.println ("Fichero " + args[0] + " no encontrado.");
                }
                catch (TokenMgrError e) {
                        System.err.println("ERROR L\u00c9XICO: " + e.getMessage());
                }
                catch (ParseException e) {
                        System.err.println("----------------------------------------");
                        System.err.println(e.getMessage());
                }
                catch (Exception e) {
                        e.printStackTrace();
                }
   }

//-------------------游녢游낖 Analizador sint치ctico 游녢游낖-------------------

//------------ S칤mbolo inicial de la gram치tica.
// Programa: <tPROCEDURE> <tID> <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instruccion* <tEND> <tSEMICOLON> <EOF>
  static final public void Programa() throws ParseException {Token id;
    jj_consume_token(tPROCEDURE);
    id = jj_consume_token(tID);
// Procedimiento principal
                semantic.insertSymbol(new SymbolProcedure(id.image, new ArrayList<Symbol>()));
                st.insertBlock(); // Bloque 0

    jj_consume_token(tIS);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declaracion_var();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
    label_3:
    while (true) {
      instruccion();
      if (jj_2_1(1)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
System.err.println(st.toString(id.image)); // Impresi칩n de la tabla de s칤mbolos
                st.removeBlock(); // Eliminaci칩n del bloque principal

    jj_consume_token(0);
}

//declaracion_var: lista_ids <tCOLON> tipo_variable <tSEMICOLON>
  static final public void declaracion_var() throws ParseException {List<Token> t = new ArrayList<Token>();
    lista_ids(t);
    jj_consume_token(tCOLON);
    tipo_variable(t, null, Symbol.ParameterClass.NONE);
    jj_consume_token(tSEMICOLON);
}

//lista_ids: <tID> (<tCOMMA> <tID>)*
  static final public void lista_ids(List<Token> tokens) throws ParseException {Token t;
    t = jj_consume_token(tID);
tokens.add(t);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(tCOMMA);
      t = jj_consume_token(tID);
tokens.add(t);
    }
}

//tipo_variable: (tipo_variable_simple | tipo_variable_array)
  static final public Symbol.Types tipo_variable(List<Token> t, SymbolArray paramArray, Symbol.ParameterClass paramClass) throws ParseException {Symbol.Types baseType = Symbol.Types.ARRAY; // Si no es tipo simple, es un array

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tINT:
    case tCHAR:
    case tBOOL:{
      baseType = tipo_variable_simple(t, null, paramClass);
      break;
      }
    case tARRAY:{
      tipo_variable_array(t, paramArray, paramClass);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return baseType;} // Si es un tipo simple, se devuelve el tipo de la variable

    throw new Error("Missing return statement in function");
}

//tipo_variable_array: <tARRAY> <tLPAREN> <tCONST_INT> <tRANGE> <tCONST_INT> <tRPAREN> <tOF> tipo_variable_simple
  static final public void tipo_variable_array(List<Token> t, SymbolArray paramArray, Symbol.ParameterClass paramClass) throws ParseException {Token tMin, tMax;
        int min, max, minus1 = 1, minus2 = 1;
        Symbol.Types baseType;
        SymbolArray baseArray = null;
        boolean isParameter = (paramClass != Symbol.ParameterClass.NONE);
    jj_consume_token(tARRAY);
    jj_consume_token(tLPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMINUS:{
        jj_consume_token(tMINUS);
minus1 = -1;
        break;
        }
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    tMin = jj_consume_token(tCONST_INT);
    jj_consume_token(tRANGE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMINUS:{
        jj_consume_token(tMINUS);
minus2 = -1;
        break;
        }
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    tMax = jj_consume_token(tCONST_INT);
    jj_consume_token(tRPAREN);
min = Integer.parseInt(tMin.image) * minus1;
                max = Integer.parseInt(tMax.image) * minus2;
                if (min > max) {
                        semantic.error(getToken(0), "Los vectores deben tener un rango no vac\u00edo de enteros, se ha encontrado (" + min + ".." + max + ")");
                }
                if (!isParameter) { // Declaraci칩n variable ARRAY
                        // if (!min.constant || !max.constant) {
                        // 	System.err.println("ERROR: Los l칤mites de un array deben ser constantes.");
                        // } // ESTO ES UN ERROR SINT츼CTICO

                        baseArray = new SymbolArray("", min, max, Symbol.Types.UNDEFINED, paramClass);
                        // baseArray se crea aqu칤 para que en tipo_variable_simple se pueda insertar en la 
                        // tabla de s칤mbolos con los valores de min y max
                }
    jj_consume_token(tOF);
    baseType = tipo_variable_simple(t, baseArray, null);
if (isParameter){ // Par치metro ARRAY
                        // paramArray se ha creado en parametro_formal para rellenarse aqu칤
                        paramArray.minInd = min;
                        paramArray.maxInd = max;
                        paramArray.parClass = paramClass;
                        paramArray.baseType = baseType;
                }
}

//tipo_variable_simple: <tINT> | <tCHAR> | <tBOOL>
  static final public Symbol.Types tipo_variable_simple(List<Token> t, SymbolArray baseArray, Symbol.ParameterClass paramClass) throws ParseException {Symbol.Types type = null;
        boolean isArray = (baseArray != null);
        // Si baseArray no es null, estamos en una declaraci칩n de array y 
        // contiene los valores de min, max y paramClass

    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tINT:{
      jj_consume_token(tINT);
type = Symbol.Types.INT;
      break;
      }
    case tCHAR:{
      jj_consume_token(tCHAR);
type = Symbol.Types.CHAR;
      break;
      }
    case tBOOL:{
      jj_consume_token(tBOOL);
type = Symbol.Types.BOOL;
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
if (t == null) { // Par치metros
                        // Si no hay tokens, devolver el tipo de la variable porque se est치n leyendo par치metros
                        // y estos se insertan en st en declaracion_procedimiento y declaracion_funcion
                        {if ("" != null) return type;}
                }
                else if (isArray) { // Declaraci칩n de variables arrays
                        baseArray.baseType = type;
                        for (Token id : t) {
                                SymbolArray newArray = baseArray.clone();
                                newArray.name = id.image;
                                semantic.insertSymbol(newArray);
                        }
                } else { // Declaraci칩n de variables simples
                        for (Token id : t) {
                                switch (type) {
                                        case INT:  semantic.insertSymbol(new  SymbolInt(id.image, paramClass)); break;
                                        case CHAR: semantic.insertSymbol(new SymbolChar(id.image, paramClass)); break;
                                        case BOOL: semantic.insertSymbol(new SymbolBool(id.image, paramClass)); break;
                                }
                        }
                }
                {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

//declaracion_procedimiento: cabecera_procedimiento (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
  static final public void declaracion_procedimiento() throws ParseException {Token id;
        ArrayList <Symbol> params = new ArrayList<Symbol>();
    jj_consume_token(tPROCEDURE);
    id = jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      lista_parametros(params);
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
semantic.insertSymbol(new SymbolProcedure(id.image, params));
                st.insertBlock();
                for (Symbol s : params) { // insertar params en la tabla de s칤mbolos tras crear un nuevo bloque
                        semantic.insertSymbol(s);
                }
    jj_consume_token(tIS);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_5;
      }
      declaracion_var();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
    label_7:
    while (true) {
      instruccion();
      if (jj_2_2(1)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
System.err.println(st.toString(id.image)); // Impresi칩n de la tabla de s칤mbolos
                st.removeBlock(); // Eliminaci칩n del bloque actual

}

//declaracion_funcion: <tFUNCTION> <tID> ( <tLPAREN> lista_parametros <tRPAREN> )? <tRETURN> tipo_variable <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
  static final public void declaracion_funcion() throws ParseException {Token id;
        Symbol.Types returnType;
        ArrayList <Symbol> params = new ArrayList<Symbol>();
    jj_consume_token(tFUNCTION);
    id = jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      lista_parametros(params);
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    returnType = tipo_variable_simple(null, null, Symbol.ParameterClass.NONE);
semantic.insertSymbol(new SymbolFunction(id.image, params, returnType));
                st.insertBlock();
                for (Symbol s : params) { // insertar params en la tabla de s칤mbolos tras crear un nuevo bloque
                        semantic.insertSymbol(s);
                }
    jj_consume_token(tIS);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        break label_8;
      }
      declaracion_var();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
semantic.enterFunction(id.image);
    label_10:
    while (true) {
      instruccion();
      if (jj_2_3(1)) {
        ;
      } else {
        break label_10;
      }
    }
semantic.exitFunction();
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
System.err.println(st.toString(id.image)); // Impresi칩n de la tabla de s칤mbolos
                st.removeBlock(); // Eliminaci칩n del bloque actual

}

//lista_parametros: parametro_formal (<tSEMICOLON> parametro_formal)*
  static final public void lista_parametros(List<Symbol> params) throws ParseException {
    parametro_formal(params);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_11;
      }
      jj_consume_token(tSEMICOLON);
      parametro_formal(params);
    }
}

//parametro_formal: lista_ids <tCOLON> <tREF>? tipo_variable
  static final public void parametro_formal(List<Symbol> params) throws ParseException {List<Token> t = new ArrayList<Token>();
        SymbolArray paramArray = new SymbolArray(""); // Usado para par치metros array
        Symbol.Types baseType;
        Symbol.ParameterClass paramClass = Symbol.ParameterClass.VAL;
    lista_ids(t);
    jj_consume_token(tCOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      jj_consume_token(tREF);
paramClass = Symbol.ParameterClass.REF;
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      ;
    }
    baseType = tipo_variable(null, paramArray, paramClass);
if (baseType == Symbol.Types.ARRAY) { // Par치metros array
                        for (Token id : t) {
                                SymbolArray newArray = paramArray.clone();
                                newArray.name = id.image;
                                params.add(newArray);
                        }
                } else { // Par치metros simples
                        for (Token id : t) {
                                switch (baseType) {
                                        case INT:  params.add(new  SymbolInt(id.image, paramClass)); break;
                                        case CHAR: params.add(new SymbolChar(id.image, paramClass)); break;
                                        case BOOL: params.add(new SymbolBool(id.image, paramClass)); break;
                                }
                        }
                }
}

/*------------------------------------------- INSTRUCCIONES -------------------------------------------*/

//instruccion: (inst_leer | <tSKIP_LINE> | inst_escribir | inst_escribir_linea | inst_invocacion_procedimiento | inst_asignacion | inst_if | inst_while | inst_return | <tNULL>) <tSEMICOLON>
// 'inst_return' solamente es derivable si estamos dentro de una funci칩n. Este comportamiento se consigue gracias al LOOKAHEAD sint치ctico.
  static final public void instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer();
      break;
      }
    case tSKIP_LINE:{
      jj_consume_token(tSKIP_LINE);
      break;
      }
    case tPUT:{
      inst_escribir();
      break;
      }
    case tPUT_LINE:{
      inst_escribir_linea();
      break;
      }
    case tID:{
      inst_invocacion_procedimiento_o_asignacion();
      break;
      }
    case tIF:{
      inst_if();
      break;
      }
    case tWHILE:{
      inst_while();
      break;
      }
    case tNULL:{
      jj_consume_token(tNULL);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      if (semantic.inFunction()) {
        inst_return();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tSEMICOLON);
}

//inst_leer: <tGET> <tLPAREN> <tID> (array_component)? ( <tCOMMA> <tID> (array_component)? )* <tRPAREN>
  static final public void inst_leer() throws ParseException {
    jj_consume_token(tGET);
    jj_consume_token(tLPAREN);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      array_component();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        break label_12;
      }
      jj_consume_token(tCOMMA);
      jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        array_component();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
    }
    jj_consume_token(tRPAREN);
}

//array_component: <tLPAREN> expresion <tRPAREN>
  static final public void array_component() throws ParseException {Symbol.Types type;
    jj_consume_token(tLPAREN);
    type = expresion();
if (type != Symbol.Types.INT) { // Comprobar que el 칤ndice es de tipo INT
                        semantic.error(getToken(0), "El \u00edndice de un array debe ser de tipo " + tokenImage[tINT] + ".");
                }
                // No hace falta comprobar que el 칤ndice est칠 dentro del rango del array porque no lo piden

    jj_consume_token(tRPAREN);
}

//inst_escribir: <tPUT> <tLPAREN> (<tCONST_STRING> | expresion) ( <tCOMMA> (<tCONST_STRING> | expresion) )* <tRPAREN>
  static final public void inst_escribir() throws ParseException {
    jj_consume_token(tPUT);
    jj_consume_token(tLPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCONST_STRING:{
      jj_consume_token(tCONST_STRING);
      break;
      }
    case tLPAREN:
    case tINT2CHAR:
    case tCHAR2INT:
    case tTRUE:
    case tFALSE:
    case tCONST_INT:
    case tCONST_CHAR:
    case tNOT:
    case tPLUS:
    case tMINUS:
    case tID:{
      expresion();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        break label_13;
      }
      jj_consume_token(tCOMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCONST_STRING:{
        jj_consume_token(tCONST_STRING);
        break;
        }
      case tLPAREN:
      case tINT2CHAR:
      case tCHAR2INT:
      case tTRUE:
      case tFALSE:
      case tCONST_INT:
      case tCONST_CHAR:
      case tNOT:
      case tPLUS:
      case tMINUS:
      case tID:{
        expresion();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tRPAREN);
}

//inst_escribir_linea: <tPUT_LINE> (<tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>)?
  static final public void inst_escribir_linea() throws ParseException {
    jj_consume_token(tPUT_LINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCONST_STRING:{
        jj_consume_token(tCONST_STRING);
        break;
        }
      case tLPAREN:
      case tINT2CHAR:
      case tCHAR2INT:
      case tTRUE:
      case tFALSE:
      case tCONST_INT:
      case tCONST_CHAR:
      case tNOT:
      case tPLUS:
      case tMINUS:
      case tID:{
        expresion();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[28] = jj_gen;
          break label_14;
        }
        jj_consume_token(tCOMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCONST_STRING:{
          jj_consume_token(tCONST_STRING);
          break;
          }
        case tLPAREN:
        case tINT2CHAR:
        case tCHAR2INT:
        case tTRUE:
        case tFALSE:
        case tCONST_INT:
        case tCONST_CHAR:
        case tNOT:
        case tPLUS:
        case tMINUS:
        case tID:{
          expresion();
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      ;
    }
}

//inst_invocacion_procedimiento_o_asignacion: <tID> ( inst_asignacion | inst_invocacion_procedimiento )
  static final public void inst_invocacion_procedimiento_o_asignacion() throws ParseException {
    jj_consume_token(tID);
    if (jj_2_4(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        array_component();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(tASSIGN);
      expresion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        jj_consume_token(tLPAREN);
        expresion();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tCOMMA:{
            ;
            break;
            }
          default:
            jj_la1[32] = jj_gen;
            break label_15;
          }
          jj_consume_token(tCOMMA);
          expresion();
        }
        jj_consume_token(tRPAREN);
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        ;
      }
    }
}

//inst_if: <tIF> expresion <tTHEN> instruccion+ (<tELSIF> expresion <tTHEN> instruccion+)* (<tELSE> instruccion+)? <tENDIF>
  static final public void inst_if() throws ParseException {
    jj_consume_token(tIF);
    expresion();
    jj_consume_token(tTHEN);
    label_16:
    while (true) {
      instruccion();
      if (jj_2_5(1)) {
        ;
      } else {
        break label_16;
      }
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSIF:{
        ;
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        break label_17;
      }
      jj_consume_token(tELSIF);
      expresion();
      jj_consume_token(tTHEN);
      label_18:
      while (true) {
        instruccion();
        if (jj_2_6(1)) {
          ;
        } else {
          break label_18;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      label_19:
      while (true) {
        instruccion();
        if (jj_2_7(1)) {
          ;
        } else {
          break label_19;
        }
      }
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(tEND);
    jj_consume_token(tIF);
}

//inst_while: <tWHILE> expresion <tLOOP> instruccion+ <tENDLOOP>
  static final public void inst_while() throws ParseException {
    jj_consume_token(tWHILE);
    expresion();
    jj_consume_token(tLOOP);
    label_20:
    while (true) {
      instruccion();
      if (jj_2_8(1)) {
        ;
      } else {
        break label_20;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tLOOP);
}

//inst_return: <tRETURN> (expresion)?
  static final public void inst_return() throws ParseException {Symbol.Types returnType;
    jj_consume_token(tRETURN);
    returnType = expresion();
// Comprobar que la expresi칩n de retorno es del mismo tipo que el tipo de retorno de la funci칩n
                SymbolFunction function = semantic.getCurrentFunctionSymbol();
                if (returnType != function.returnType) {
                        String returnTypeStr, expectedTypeStr;
                        switch (returnType) {
                                case INT:  returnTypeStr = tokenImage[tINT]; break;
                                case CHAR: returnTypeStr = tokenImage[tCHAR]; break;
                                case BOOL: returnTypeStr = tokenImage[tBOOL]; break;
                                default:   returnTypeStr = "indefinido"; break;
                        }
                        switch (function.returnType) {
                                case INT:  expectedTypeStr = tokenImage[tINT]; break;
                                case CHAR: expectedTypeStr = tokenImage[tCHAR]; break;
                                case BOOL: expectedTypeStr = tokenImage[tBOOL]; break;
                                default:   expectedTypeStr = "indefinido"; break;
                        }
                        semantic.error(getToken(0), "El tipo de retorno " + expectedTypeStr + " de la funci\u00f3n '" + function.name +
                                        "' no coincide con el tipo " + returnTypeStr + " de la expresi\u00f3n de retorno ");
                }
}

/*--------------------------------------- EXPRESIONES ---------------------------------------*/

//expresion: relacion ((<tAND> | <tOR>) relacion)*
  static final public Symbol.Types expresion() throws ParseException {ArrayList<Symbol.Types> relaciones = new ArrayList<>();
        Symbol.Types type;
    type = relacion();
relaciones.add(type);
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:
      case tOR:{
        ;
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type = relacion();
relaciones.add(type);
    }
// Si hay m치s de una relaci칩n, deben ser todas BOOL
                if (relaciones.size() > 1) {
                        for (Symbol.Types t : relaciones) {
                                if (t != Symbol.Types.BOOL) {
                                        semantic.error(getToken(0), "Las relaciones de una expresi\u00f3n l\u00f3gica deben ser de tipo " + tokenImage[tBOOL] + ".");
                                }
                        }
                }
                {if ("" != null) return relaciones.get(0);}
    throw new Error("Missing return statement in function");
}

//relacion: expresion_simple (operador_relacional expresion_simple)?
  static final public Symbol.Types relacion() throws ParseException {ArrayList<Symbol.Types> expresiones = new ArrayList<>();
        Symbol.Types type;
    type = expresion_simple();
expresiones.add(type);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:
    case tNEQ:
    case tLT:
    case tLE:
    case tGT:
    case tGE:{
      operador_relacional();
      type = expresion_simple();
expresiones.add(type);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
// Puede haber una o dos expresiones, pero si hay dos, deben ser del mismo tipo
                if (expresiones.size() == 2) {
                        if (expresiones.get(0) != expresiones.get(1))
                                semantic.error(getToken(0), "Las expresiones de una relaci\u00f3n deben ser del mismo tipo.");

                        {if ("" != null) return Symbol.Types.BOOL;} // Si hay dos expresiones, el resultado es booleano
                }
                // else: si hay solo una expresi칩n, se devuelve su tipo
                {if ("" != null) return expresiones.get(0);}
    throw new Error("Missing return statement in function");
}

//operador_relacional: (<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>)
  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:{
      jj_consume_token(tEQ);
      break;
      }
    case tLT:{
      jj_consume_token(tLT);
      break;
      }
    case tGT:{
      jj_consume_token(tGT);
      break;
      }
    case tLE:{
      jj_consume_token(tLE);
      break;
      }
    case tGE:{
      jj_consume_token(tGE);
      break;
      }
    case tNEQ:{
      jj_consume_token(tNEQ);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//expresion_simple: ( <tPLUS> |	<tMINUS> )? termino ( ( <tPLUS> | <tMINUS> ) termino )*
  static final public Symbol.Types expresion_simple() throws ParseException {ArrayList<Symbol.Types> terminos = new ArrayList<>();
        Symbol.Types type;
        boolean sign1 = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
sign1 = true;
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
sign1 = true;
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      ;
    }
    type = termino();
terminos.add(type);
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:
      case tMINUS:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      type = termino();
terminos.add(type);
    }
// Si hay m치s de un t칠rmino, deben ser todos INT
                if (terminos.size() > 1) {
                        for (Symbol.Types t : terminos) {
                                if (t != Symbol.Types.INT) {
                                        semantic.error(getToken(0),
                                                        "Los t\u00e9rminos de una suma o resta deben ser de tipo " + tokenImage[tINT] + ".");
                                }
                        }
                } else if (sign1 && terminos.get(0) != Symbol.Types.INT) {
                        semantic.error(getToken(0), "Los signos " + tokenImage[tPLUS] + " y " + tokenImage[tMINUS] +
                                        " solo se puede usar con variables de tipo " + tokenImage[tINT] + ".");
                }
                {if ("" != null) return terminos.get(0);}
    throw new Error("Missing return statement in function");
}

//termino: factor (operador_multiplicativo factor)*
  static final public Symbol.Types termino() throws ParseException {ArrayList<Symbol.Types> factores = new ArrayList<>();
        Symbol.Types type;
    type = factor();
factores.add(type);
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMULT:
      case tDIV:
      case tMOD:{
        ;
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        break label_23;
      }
      operador_multiplicativo();
      type = factor();
factores.add(type);
    }
// Si hay m치s de un factor, deben ser todos INT
                if (factores.size() > 1) {
                        for (Symbol.Types t : factores) {
                                if (t != Symbol.Types.INT) {
                                        semantic.error(getToken(0),
                                                        "Los factores de una multiplicaci\u00f3n, divisi\u00f3n y m\u00f3dulo deben ser de tipo " + tokenImage[tINT] + ".");
                                }
                        }
                }
                {if ("" != null) return factores.get(0);}
    throw new Error("Missing return statement in function");
}

//operador_multiplicativo: (<tMULT> | <tDIV> | <tMOD>)
  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tMULT:{
      jj_consume_token(tMULT);
      break;
      }
    case tDIV:{
      jj_consume_token(tDIV);
      break;
      }
    case tMOD:{
      jj_consume_token(tMOD);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//factor: (<tNOT>)? primario
  static final public Symbol.Types factor() throws ParseException {Symbol.Types type;
        boolean not = false;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tNOT:{
      jj_consume_token(tNOT);
not = true;
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
    type = primario();
if (not && type != Symbol.Types.BOOL) {
                        semantic.error(getToken(0), "El operador " + tokenImage[tNOT] +
                                        " solo se puede usar con variables de tipo " + tokenImage[tBOOL] + ".");
                }
                {if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

//primario: <tLPAREN> expresion <tRPAREN> | <tINT2CHAR> <tLPAREN> expresion <tRPAREN> | <tCHAR2INT> <tLPAREN> expresion <tRPAREN> 
//			| <tID> (<tLPAREN> lista_una_o_mas_exps <tRPAREN>)? | <tID> | <tCONST_INT> | <tCONST_CHAR> | <tTRUE> | <tFALSE>
  static final public Symbol.Types primario() throws ParseException {Symbol.Types type;
        Token id;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      type = expresion();
      jj_consume_token(tRPAREN);
      break;
      }
    case tINT2CHAR:{
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tLPAREN);
      type = expresion();
      jj_consume_token(tRPAREN);
// Comprobar que la expresi칩n es de tipo INT
                if (type != Symbol.Types.INT) {
                        semantic.error(getToken(0), "La expresi\u00f3n debe ser de tipo " + tokenImage[tINT] + ".");
                }
                type = Symbol.Types.CHAR;
      break;
      }
    case tCHAR2INT:{
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tLPAREN);
      type = expresion();
      jj_consume_token(tRPAREN);
// Comprobar que la expresion() es de tipo CHAR
                if (type != Symbol.Types.CHAR) {
                        semantic.error(getToken(0), "La expresi\u00f3n debe ser de tipo " + tokenImage[tINT] + ".");
                }
                type = Symbol.Types.INT;
      break;
      }
    case tID:{
      id = jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        jj_consume_token(tLPAREN);
        lista_una_o_mas_exps();
        jj_consume_token(tRPAREN);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
type = semantic.getSymbolType(id.image);
      break;
      }
    case tCONST_INT:{
      jj_consume_token(tCONST_INT);
type = Symbol.Types.INT;
      break;
      }
    case tCONST_CHAR:{
      jj_consume_token(tCONST_CHAR);
type = Symbol.Types.CHAR;
      break;
      }
    case tTRUE:{
      jj_consume_token(tTRUE);
type = Symbol.Types.BOOL;
      break;
      }
    case tFALSE:{
      jj_consume_token(tFALSE);
type = Symbol.Types.BOOL;
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
}

//lista_una_o_mas_exps: expresion() ( <tCOMMA> expresion() )*
  static final public void lista_una_o_mas_exps() throws ParseException {
    expresion();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_24;
      }
      jj_consume_token(tCOMMA);
      expresion();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_inst_escribir_465_9_36()
 {
    if (jj_scan_token(tPUT)) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_551_10_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    if (jj_3R_relacion_572_9_43()) return true;
    return false;
  }

  static private boolean jj_3R_operador_multiplicativo_646_9_57()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_550_9_42()
 {
    if (jj_3R_relacion_572_9_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expresion_551_10_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_array_component_452_9_34()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_550_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_inst_leer_442_9_35()
 {
    if (jj_scan_token(tGET)) return true;
    return false;
  }

  static private boolean jj_3R_termino_628_11_54()
 {
    if (jj_3R_operador_multiplicativo_646_9_57()) return true;
    if (jj_3R_factor_656_9_53()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_434_13_33()
 {
    if (jj_3R_inst_return_517_9_41()) return true;
    return false;
  }

  static private boolean jj_3R_lista_una_o_mas_exps_708_23_68()
 {
    if (jj_scan_token(tCOMMA)) return true;
    if (jj_3R_expresion_550_9_42()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_601_35_52()
 {
    if (jj_scan_token(tMINUS)) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_432_13_32()
 {
    if (jj_3R_inst_while_506_9_40()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_431_13_31()
 {
    if (jj_3R_inst_if_497_9_39()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_430_13_30()
 {
    if (jj_3R_inst_invocacion_procedimiento_o_asignacion_484_9_38()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_426_17_27()
 {
    if (jj_3R_inst_leer_442_9_35()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_429_13_29()
 {
    if (jj_3R_inst_escribir_linea_475_9_37()) return true;
    return false;
  }

  static private boolean jj_3R_termino_627_5_48()
 {
    if (jj_3R_factor_656_9_53()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_termino_628_11_54()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_instruccion_428_13_28()
 {
    if (jj_3R_inst_escribir_465_9_36()) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_primario_691_29_66()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_lista_una_o_mas_exps_708_9_67()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_426_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_instruccion_426_17_27()) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_428_13_28()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_429_13_29()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_430_13_30()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_431_13_31()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_432_13_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = semantic.inFunction();
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_instruccion_434_13_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_lista_una_o_mas_exps_708_9_67()
 {
    if (jj_3R_expresion_550_9_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_lista_una_o_mas_exps_708_23_68()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_inst_return_517_9_41()
 {
    if (jj_scan_token(tRETURN)) return true;
    return false;
  }

  static private boolean jj_3R_primario_698_17_65()
 {
    if (jj_scan_token(tFALSE)) return true;
    return false;
  }

  static private boolean jj_3R_primario_697_17_64()
 {
    if (jj_scan_token(tTRUE)) return true;
    return false;
  }

  static private boolean jj_3R_primario_696_17_63()
 {
    if (jj_scan_token(tCONST_CHAR)) return true;
    return false;
  }

  static private boolean jj_3R_primario_695_17_62()
 {
    if (jj_scan_token(tCONST_INT)) return true;
    return false;
  }

  static private boolean jj_3R_primario_691_17_61()
 {
    if (jj_scan_token(tID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primario_691_29_66()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_602_10_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) return true;
    }
    if (jj_3R_termino_627_5_48()) return true;
    return false;
  }

  static private boolean jj_3R_inst_while_506_9_40()
 {
    if (jj_scan_token(tWHILE)) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_601_8_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expresion_simple_601_8_51()) {
    jj_scanpos = xsp;
    if (jj_3R_expresion_simple_601_35_52()) return true;
    }
    return false;
  }

  static private boolean jj_3R_expresion_simple_601_8_51()
 {
    if (jj_scan_token(tPLUS)) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_601_6_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expresion_simple_601_8_47()) jj_scanpos = xsp;
    if (jj_3R_termino_627_5_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expresion_simple_602_10_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_primario_683_17_60()
 {
    if (jj_scan_token(tCHAR2INT)) return true;
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_550_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_null_486_21_26()
 {
    if (jj_3R_array_component_452_9_34()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_486_21_26()) jj_scanpos = xsp;
    if (jj_scan_token(tASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_inst_if_497_9_39()
 {
    if (jj_scan_token(tIF)) return true;
    return false;
  }

  static private boolean jj_3R_operador_relacional_590_9_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(46)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_primario_675_17_59()
 {
    if (jj_scan_token(tINT2CHAR)) return true;
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_550_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_primario_674_17_58()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_550_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_primario_674_9_56()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primario_674_17_58()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_675_17_59()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_683_17_60()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_691_17_61()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_695_17_62()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_696_17_63()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_697_17_64()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_698_17_65()) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_inst_invocacion_procedimiento_o_asignacion_484_9_38()
 {
    if (jj_scan_token(tID)) return true;
    return false;
  }

  static private boolean jj_3R_relacion_573_11_46()
 {
    if (jj_3R_operador_relacional_590_9_50()) return true;
    if (jj_3R_expresion_simple_601_6_45()) return true;
    return false;
  }

  static private boolean jj_3R_relacion_572_9_43()
 {
    if (jj_3R_expresion_simple_601_6_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_relacion_573_11_46()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_inst_escribir_linea_475_9_37()
 {
    if (jj_scan_token(tPUT_LINE)) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_instruccion_426_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_factor_656_11_55()
 {
    if (jj_scan_token(tNOT)) return true;
    return false;
  }

  static private boolean jj_3R_factor_656_9_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_factor_656_11_55()) jj_scanpos = xsp;
    if (jj_3R_primario_674_9_56()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x60000,0x60000,0x20,0x1000700,0x0,0x0,0x0,0x0,0x700,0x40,0x0,0x60000,0x60000,0x40,0x0,0x60000,0x60000,0x8,0x80000,0x78002800,0x40,0x20,0x40,0x80000040,0x20,0x80000040,0x80000040,0x20,0x80000040,0x40,0x40,0x20,0x40,0x8000,0x10000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x80000040,0x20,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x800000,0x0,0x0,0x0,0x0,0xc0000,0xc0000,0xc0000,0xc0000,0x0,0x0,0x800000,0x0,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x800004,0x0,0x0,0x0,0x8c08f9,0x0,0x8c08f9,0x8c08f9,0x0,0x8c08f9,0x0,0x0,0x0,0x0,0x0,0x0,0x600,0x600,0x3f000,0x3f000,0xc0000,0xc0000,0xc0000,0xc0000,0x700000,0x700000,0x800,0x0,0x800079,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 50; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[61];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 50; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 61; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 8; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
