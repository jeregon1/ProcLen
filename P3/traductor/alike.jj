//*****************************************************************
// File:   alike.jj
// Author: Jesús López Ansón, 839922
// 		   Javier Sin Pelayo, 843442
// Date:   marzo 2024
// Coms:   compilar mediante "ant"
// Doc:    https://javacc.github.io/javacc/
//*****************************************************************

options {
	IGNORE_CASE = true;
	UNICODE_INPUT = true;
	// DEBUG_PARSER = true;
}

PARSER_BEGIN(alike)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.SemanticFunctions.SemanticFunctions;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.LinkedHashMap;

public class alike {
	// Tabla de símbolos global
	static SymbolTable st;
	static SemanticFunctions semantic;

	static boolean verbose = false;

   	public static void main(String[] args) {
	   	alike parser = null;
		
		// argumento verbose
		if (args.length > 1 && args[1].equals("-v")) {
			verbose = true;
		}

		st = new SymbolTable();
	   	semantic = new SemanticFunctions(st);
		String fileName = "";
	   
	   	try {
			if(args.length == 0) {
				parser = new alike(System.in);
			}
			else {
				fileName = args[0] + ".al";
				parser = new alike(new java.io.FileInputStream(fileName));
			}
			//Programa es el símbolo inicial de la gramática
			parser.Programa();
			
			if (!semantic.hayErrores())
				System.out.println("***** Análisis terminado con éxito *****");
			else
				if (semantic.getNumErrores() == 1) {
					System.out.println("Detectado 1 error semántico. No se genera código.");
				} else {
					System.out.println("Detectados " + semantic.getNumErrores() + " errores semánticos. No se genera código.");
				}
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + fileName + " no encontrado.");
		}
		catch (TokenMgrError e) {
			System.err.println("ERROR LÉXICO: " + e.getMessage());
		}
		catch (ParseException e) {
			System.err.println("----------------------------------------");
			System.err.println(e.getMessage());
		}
		catch (Exception e) {
			e.printStackTrace();
		}
   }
}


PARSER_END(alike)

//---------------------------------------------------------


SKIP : {
	" " | "\t" | "\n" | "\r" 
	|  <COMMENT: "--" (~["\n", "\r"])*> 
}

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) > 
|	< #DIGIT: ["0"-"9"] >

	// Separadores
|	< tSEMICOLON: ";" >
|	< tCOLON: ":" >
|	< tCOMMA: "," >

	// Delimitadores
|	< tLPAREN: "(" >
|	< tRPAREN: ")" >

	// Tipos de datos
|	< tINT: "integer" >
|	< tCHAR: "character" >
|	< tBOOL: "boolean" >

|   < tARRAY: "array" >
| 	< tOF: "of" >
|	< tRANGE: ".." >

	// Palabras reservadas
|	< tWHILE: "while" > 
|   < tLOOP: "loop" >
|	< tIF: "if" >
|	< tTHEN: "then" >
|	< tELSIF: "elsif" >
|	< tELSE: "else" >

|   < tPROCEDURE: "procedure" >
|   < tFUNCTION: "function" >
|   < tREF: "ref" >
|   < tIS: "is" >
|   < tBEGIN: "begin" >
|   < tEND: "end" >
|	< tRETURN: "return" > 

	// Funciones estándar
| 	< tPUT: "put" >
| 	< tPUT_LINE: "put_line" >
|	< tGET: "get" >
|	< tSKIP_LINE: "skip_line" >
|	< tINT2CHAR: "int2char" >
|	< tCHAR2INT: "char2int" >
|	< tEXIT: "exit" >
|	< tNULL: "null" >

	// Literales
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tCONST_INT: (<DIGIT>)+ >
|	< tCONST_CHAR: "'"~[]"'" >
|	< tCONST_STRING: "\"" ((~["\""] | "\"\""))* "\"" > // Dos comillas dobles seguidas se consideran una comilla doble
	{
		// Sustituir las comillas dobles por una comilla simple
		String str = matchedToken.image;
		str = str.substring(1, str.length() - 1); // Eliminar las comillas dobles de los extremos
		matchedToken.image = str.replace("\"\"", "\""); // Sustituir las parejas de comillas dobles por una sola ocurrencia
	}

	// Operadores
|	< tASSIGN: ":=" > 
|	< tAND: "and" >
|	< tOR: "or" >
|	< tNOT: "not" >
|	< tEQ: "=" >
|	< tNEQ: "/=" >
|	< tLT: "<" >
|	< tLE: "<=" >
|	< tGT: ">" >
|	< tGE: ">=" >
|	< tPLUS: "+" >
|	< tMINUS: "-" >
|	< tMULT: "*" >
|	< tDIV: "/" >
|	< tMOD: "mod" >

	// Otros
|	< tID: (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")* >

}

SPECIAL_TOKEN : { // Debe estar al final para que sea lo último en comprobarse
 	< tBASURA: ~[] >
	 	{
			System.err.println("----------------------------------------");
			System.err.println(TokenMgrError.LexicalErr(matchedToken, "Carácter extraño: '" + matchedToken.image + "'. Reemplazo por espacio"));
			matchedToken.image = " ";
	 	}
}


//-------------------👇🏼 Analizador sintáctico 👇🏼-------------------

//------------ Símbolo inicial de la gramática.
// Programa: <tPROCEDURE> <tID> <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instruccion* <tEND> <tSEMICOLON> <EOF>
void Programa() : 
{
	Token id;
}
{
	<tPROCEDURE> 
	id = <tID>
	{	// Procedimiento principal
		semantic.insertSymbol(id, new SymbolProcedure(id.image, new ArrayList<Symbol>()));
		semantic.setMainProcedureName(id.image);
	}
	<tIS>
	( declaracion_var() )*
	( declaracion_procedimiento() | declaracion_funcion() )*
	<tBEGIN>
	(instruccion())+
	<tEND>
	<tSEMICOLON>
	{
		if (verbose) System.err.println(st.toString(id.image)); // Impresión de la tabla de símbolos
	}

   < EOF >
}

//declaracion_var: lista_ids <tCOLON> tipo_variable <tSEMICOLON>
void declaracion_var() : 
{
	List<Token> t = new ArrayList<Token>();
}
{
	lista_ids(t)
	<tCOLON>
	tipo_variable(t, null, Symbol.ParameterClass.NONE)
	<tSEMICOLON> 
}

//lista_ids: <tID> (<tCOMMA> <tID>)*
void lista_ids(List<Token> tokens) :
{
	Token t;
}
{
	t = <tID> {tokens.add(t);}
	(<tCOMMA> t = <tID> {tokens.add(t);})*
}

//tipo_variable: (tipo_variable_simple | tipo_variable_array)
Symbol.Types tipo_variable(List<Token> t, SymbolArray paramArray, Symbol.ParameterClass paramClass) : 
{
	Symbol.Types baseType = Symbol.Types.ARRAY; // Si no es tipo simple, es un array
}
{
	( baseType = tipo_variable_simple(t, null, paramClass) | tipo_variable_array(t, paramArray, paramClass) )
	{
		return baseType; // Si es un tipo simple, se devuelve el tipo de la variable
	}
}

//tipo_variable_array: <tARRAY> <tLPAREN> <tCONST_INT> <tRANGE> <tCONST_INT> <tRPAREN> <tOF> tipo_variable_simple
void tipo_variable_array(List<Token> t, SymbolArray paramArray, Symbol.ParameterClass paramClass) : 
{
	Token tMin, tMax;
	int min, max, minus1 = 1, minus2 = 1;
	Symbol.Types baseType;
	SymbolArray baseArray = null;
	boolean isParameter = (paramClass != Symbol.ParameterClass.NONE);
	boolean isDeclaration = !isParameter;
}
{
	<tARRAY> <tLPAREN> 
	(<tMINUS> {minus1 = -1;} | <tPLUS>)? tMin = <tCONST_INT> 
	<tRANGE> 
	(<tMINUS> {minus2 = -1;} | <tPLUS>)? tMax = <tCONST_INT> 
	<tRPAREN>
	{
		min = Integer.parseInt(tMin.image) * minus1;
		max = Integer.parseInt(tMax.image) * minus2;
		if (min > max) {
			semantic.error(tMax, "Los vectores deben tener un rango no vacío de enteros, se ha encontrado (" + min + ".." + max + ")");
		}
		if (isDeclaration) {
			baseArray = new SymbolArray("", min, max, Symbol.Types.UNDEFINED, paramClass);
			// baseArray se crea aquí para que en tipo_variable_simple se pueda insertar en la 
			// tabla de símbolos con los valores de min y max
		}
	}
	<tOF> baseType = tipo_variable_simple(t, baseArray, null)
	{
		if (isParameter){ // Parámetro ARRAY
			// paramArray se ha creado en parametro_formal para rellenarse aquí
			paramArray.minInd = min;
			paramArray.maxInd = max;
			paramArray.parClass = paramClass;
			paramArray.baseType = baseType;
		}
	}
}

//tipo_variable_simple: <tINT> | <tCHAR> | <tBOOL>
Symbol.Types tipo_variable_simple(List<Token> t, SymbolArray baseArray, Symbol.ParameterClass paramClass) : 
{
	Symbol.Types type = null;
	boolean isArray = (baseArray != null);
	// Si baseArray no es null, estamos en una declaración de array y 
	// contiene los valores de min, max y paramClass
}
{
	( <tINT>  { type = Symbol.Types.INT; }
	| <tCHAR> { type = Symbol.Types.CHAR; }
	| <tBOOL> { type = Symbol.Types.BOOL; }
	)
	{
		if (t == null) { // Parámetros
			// Si no hay tokens, devolver el tipo de la variable porque se están leyendo parámetros
			// y estos se insertan en st en declaracion_procedimiento y declaracion_funcion
			return type;
		}
		else if (isArray) { // Declaración de variables arrays
			baseArray.baseType = type;
			for (Token id : t) {
				SymbolArray newArray = baseArray.clone(); // Necesario para obtener un array nuevo con la info de índices
				newArray.name = id.image;
				semantic.insertSymbol(id, newArray);
			}
		} else { // Declaración de variables simples
			for (Token id : t) {
				switch (type) {
					case INT:  semantic.insertSymbol(id, new  SymbolInt(id.image, paramClass)); break;
					case CHAR: semantic.insertSymbol(id, new SymbolChar(id.image, paramClass)); break;
					case BOOL: semantic.insertSymbol(id, new SymbolBool(id.image, paramClass)); break;
				}
			}
		}
		return type;
	}
}

//declaracion_procedimiento: cabecera_procedimiento (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
void declaracion_procedimiento() : 
{
	Token id;
	Map <Token,Symbol> params = new LinkedHashMap<Token,Symbol>(); // Linked para mantener el orden de inserción
}
{
	<tPROCEDURE>
	id = <tID> // Puede NO tener parámetros
	( <tLPAREN> lista_parametros(params) <tRPAREN> )?
	{
		semantic.insertSymbol(id, new SymbolProcedure(id.image, new ArrayList<Symbol>(params.values())));
		st.insertBlock();
		// insertar params con los tokens en la tabla de símbolos tras crear un nuevo bloque
		for (Map.Entry<Token, Symbol> entry : params.entrySet()) {
			semantic.insertSymbol(entry.getKey(), entry.getValue());
		}
	}
	<tIS>
	(declaracion_var())*
	( declaracion_procedimiento() | declaracion_funcion() )*
	<tBEGIN>
	(instruccion())+
	<tEND>
	<tSEMICOLON>
	{
		if (verbose) System.err.println(st.toString(id.image)); // Impresión de la tabla de símbolos
		st.removeBlock(); // Eliminación del bloque actual
	}
}

//declaracion_funcion: <tFUNCTION> <tID> ( <tLPAREN> lista_parametros <tRPAREN> )? <tRETURN> tipo_variable <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
void declaracion_funcion() : 
{
	Token id;
	Symbol.Types returnType;
	SymbolFunction functionSymbol;
	Map <Token,Symbol> params = new LinkedHashMap<Token,Symbol>(); // Linked para mantener el orden de inserción
}
{
	<tFUNCTION>
	id = <tID>
	( <tLPAREN> lista_parametros(params) <tRPAREN> )? // Puede NO tener parámetros
	<tRETURN>
	returnType = tipo_variable_simple(null, null, Symbol.ParameterClass.NONE)
	{
		functionSymbol = new SymbolFunction(id.image, new ArrayList<Symbol>(params.values()), returnType);
		semantic.insertSymbol(id, functionSymbol);
		st.insertBlock();
		// insertar params con los tokens en la tabla de símbolos tras crear un nuevo bloque
		for (Map.Entry<Token, Symbol> entry : params.entrySet()) {
			semantic.insertSymbol(entry.getKey() ,entry.getValue());
		}
	}
	<tIS>
	(declaracion_var())*
	( declaracion_procedimiento() | declaracion_funcion() )*
	<tBEGIN>
		{semantic.enterFunction(functionSymbol);}
	(instruccion())+
	<tEND>
	{
		semantic.exitFunction(getToken(0));
		// if (verbose) System.err.println(st.toString(id.image)); // Impresión de la tabla de símbolos
		st.removeBlock(); // Eliminación del bloque actual
	}
	<tSEMICOLON>
}


//lista_parametros: parametro_formal (<tSEMICOLON> parametro_formal)*
void lista_parametros(Map<Token,Symbol> params) : {}
{
	parametro_formal(params) 
	( <tSEMICOLON> parametro_formal(params) )*
}

//parametro_formal: lista_ids <tCOLON> <tREF>? tipo_variable
void parametro_formal(Map<Token,Symbol> params) : 
{
	List<Token> t = new ArrayList<Token>();
	SymbolArray paramArray = new SymbolArray(""); // Usado para parámetros array
	Symbol.Types baseType;
	Symbol.ParameterClass paramClass = Symbol.ParameterClass.VAL;
}
{
	lista_ids(t)
	<tCOLON>
	( <tREF> {paramClass = Symbol.ParameterClass.REF;} )?
	baseType = tipo_variable(null, paramArray, paramClass) 
	// Aquí es el único lugar donde se utiliza paramArray ya que aquí se leen parámetros
	// Funciona de manera que en tipo_variable_array al ver que paramClass no es NONE (es VAL o REF), se rellenan los datos de paramArray con: min, max y paramClass
	{
		for (Token id : t) {
		// Comprobar si hay algún parámetro con el mismo nombre se hace tras declarar todos los parámetros

			if (baseType == Symbol.Types.ARRAY) { // Parámetros array
				SymbolArray newArray = paramArray.clone();
				newArray.name = id.image;
				params.put(id, newArray);
			} else { // Parámetros simples
				switch (baseType) {
					case INT:  params.put(id, new  SymbolInt(id.image, paramClass)); break;
					case CHAR: params.put(id, new SymbolChar(id.image, paramClass)); break;
					case BOOL: params.put(id, new SymbolBool(id.image, paramClass)); break;
				}
			}
		}
	}
}


/*------------------------------------------- INSTRUCCIONES -------------------------------------------*/ 

//instruccion: (inst_leer | <tSKIP_LINE> | inst_escribir | inst_escribir_linea | inst_invocacion_procedimiento | inst_asignacion | inst_if | inst_while | inst_return | <tNULL>) <tSEMICOLON>
void instruccion(): {}
{
	(	inst_leer()
	|	<tSKIP_LINE> // Nunca recibe argumentos
	|   inst_escribir()
	|   inst_escribir_linea()
	|   inst_invocacion_procedimiento_o_asignacion()
	|   inst_if()
	|   inst_while()
	|   <tNULL>
	|   inst_return()
	)
	<tSEMICOLON>
}

//inst_leer: <tGET> <tLPAREN> <tID> (array_access)? ( <tCOMMA> <tID> (array_access)? )* <tRPAREN>
void inst_leer() : {}
{
	<tGET> // Necesita parámetros
	<tLPAREN> 
	inst_leer_elemento()
	( <tCOMMA> inst_leer_elemento() )* 
	<tRPAREN>
}

void inst_leer_elemento() :
{
	Token id;
	boolean access = false;
	// Se deben leer variables asignables de tipo integer o character
	// Solo son asignables las variables simples y los elementos de un array
}
{
	id = <tID> ( array_access() {access = true;} )?
	{
		Symbol symbol = semantic.getSymbol(id); // El error de símbolo no definido está en semantic.getSymbol
		if (symbol == null) return;

		// si es procedimiento o función, error
		if (symbol.type == Symbol.Types.PROCEDURE || symbol.type == Symbol.Types.FUNCTION) {
			semantic.error(id, "No se puede leer un procedimiento o función.");
		}

		if (symbol.type == Symbol.Types.ARRAY) {
			// si es array, comprobar que se ha accedido a un elemento y no al array entero
			if (!access) {
				semantic.error(id, "Se debe acceder a un elemento del array '" + id.image + "'.");
			}
			// si es array, comprobar que el tipo del array es INT o CHAR
			SymbolArray array = (SymbolArray) symbol;
			if (array.baseType != Symbol.Types.INT && array.baseType != Symbol.Types.CHAR) {
				semantic.error(id, "El array '" + id.image + "' debe ser de tipo " + tokenImage[tINT] + " o " + tokenImage[tCHAR] + ".");
			}
		} else if (access) { // que no se acceda a una variable simple o procedimiento o función como a un array 
			semantic.error(id, "No se puede acceder a un elemento del símbolo '" + id.image + "' por no ser de tipo " + tokenImage[tARRAY] + " sino " + symbol.type + ".");
		}

		// no puede ser boolean
		if (symbol.type == Symbol.Types.BOOL) {
			semantic.error(id, "No se puede leer una variable de tipo " + tokenImage[tBOOL] + ".");
		}
	}
}

//array_access: <tLPAREN> expresion <tRPAREN>
void array_access() : 
{
	Symbol.Types type;
}
{
	<tLPAREN> 
	type = expresion(null, null)
	{
		if (type != Symbol.Types.INT) { // Comprobar que el índice es de tipo INT
			semantic.error(getToken(0), "El índice de un array debe ser de tipo " + tokenImage[tINT] + ".");
		}
		// No hace falta comprobar que el índice esté dentro del rango del array porque no lo piden
	}
	<tRPAREN>
}

//inst_escribir: <tPUT> <tLPAREN> (<tCONST_STRING> | expresion) ( <tCOMMA> (<tCONST_STRING> | expresion) )* <tRPAREN>
void inst_escribir() : {}
{
	<tPUT> // Necesita parámetros
	<tLPAREN> 
	inst_escribir_elemento()
	( <tCOMMA> inst_escribir_elemento() )*
	<tRPAREN>
}

//inst_escribir_elemento: <tCONST_STRING> | expresion
void inst_escribir_elemento() : 
{
	Symbol.Types type = Symbol.Types.STRING;
	// Se pueden escribir constantes string y expresiones de tipo integer, character y boolean, incluidos los elementos de un array
}
{
	(<tCONST_STRING> | type = expresion(null, null))
	{
		switch (type) {
			case INT:
			case BOOL:
			case CHAR:
			case STRING: break;
			case ARRAY: semantic.error(getToken(0), "No se puede escribir un array entero, pero sí componentes de array."); break;
			default: semantic.error(getToken(0), 
					"Solo se pueden escribir valores de tipo " + tokenImage[tINT] + ", " + tokenImage[tCHAR] + ", " + tokenImage[tBOOL] + " y " + tokenImage[tCONST_STRING] + ".");
		}
	}
}

//inst_escribir_linea: <tPUT_LINE> (<tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>)?
void inst_escribir_linea() : {}
{
	<tPUT_LINE> // Puede NO tener parámetros
	(<tLPAREN> inst_escribir_elemento()
	( <tCOMMA> inst_escribir_elemento() )* <tRPAREN>
	)?

}

//inst_invocacion_procedimiento_o_asignacion: <tID> ( inst_asignacion | inst_invocacion_procedimiento )
void inst_invocacion_procedimiento_o_asignacion() : 
{
	Token id;
	Symbol.Types type;
	boolean access = false;
	Symbol symbol;
}
{
	id = <tID>
	{
		symbol = semantic.getSymbol(id);
		// Se tiene acceso a símbolos de menor nivel?
			// Respuesta: Sí, al símbolo de más alto nivel con el mismo nombre
		// comprobar qué pasa al pasar una expresión (-var) a un parámetro por referencia
			// Respuesta: no se permite: Error Argument for simple ref parameter is not a simple variable 
	}
	( // asignacion() 
		LOOKAHEAD( (array_access())? <tASSIGN> ) // comprueba si es una asignación (mediante uso de LOOKAHEAD sintáctico)
	(array_access() {access = true;} )? 
	<tASSIGN>
	type = expresion(null, null)
	{
		if (symbol == null) return;

		if (symbol.type == Symbol.Types.ARRAY) {
			if (!access) { // Si id es array, se debe acceder a un elemento (el array no es asignable pero sus elementos sí lo son) 
				semantic.error(id, "Los arrays no son asignables, se debe acceder a un elemento de '" + id.image + "'.");
			}
			Symbol.Types baseType = ((SymbolArray) symbol).baseType;
			if (baseType != type) { // Comprobar que el tipo de la expresión coincide con el tipo base del array
				semantic.error(id, "El tipo " + type + " de la expresión no coincide con el tipo " + baseType + " base del array '" + id.image + "'.");
			}
		} else if (access) { // no puede accederse a una variable no array
			semantic.error(id, "No se puede acceder a un elemento del símbolo '" + id.image + "' por ser de tipo " + tokenImage[tARRAY] + " y no " + symbol.type + ".");
		}

		// Solamente son asignables las variables simples y los elementos de un array
		if (symbol.type == Symbol.Types.PROCEDURE || symbol.type == Symbol.Types.FUNCTION) {
			semantic.error(id, "Los procedimientos y funciones no son asignables.");
		} 
		else if (symbol.type != Symbol.Types.ARRAY && symbol.type != type) { // Asignable y expresión deben ser del mismo tipo
			semantic.error(id, "El tipo " + type + " de la expresión no coincide con el tipo " + symbol.type + " de '" + id.image + "'.");
		}
	}
	| // invocación_procedimiento()
	// checkear que el id es un procedimiento y nada más
	( <tLPAREN> lista_una_o_mas_exps(id) <tRPAREN> )? 
	{
		if (symbol == null) return;
		if (symbol.type != Symbol.Types.PROCEDURE) {
			semantic.error(id, "Solo se pueden invocar procedimientos.");
		} else if (symbol.name.toLowerCase().equals(semantic.getMainProcedureName())) {
			// Checkear que no sea el procedimiento principal del programa
			// también hay que checkear que sea del nivel 0 🎃 <-- ¿?
			semantic.error(id, "No se puede invocar el procedimiento principal del programa.");
		}
	}
	)
}

//inst_if: <tIF> expresion <tTHEN> instruccion+ (<tELSIF> expresion <tTHEN> instruccion+)* (<tELSE> instruccion+)? <tEND> <IF>
void inst_if() :
{
	Symbol.Types type;
	String errorMsg = "La guarda de una sentencia " + tokenImage[tIF] + " o " +
			tokenImage[tELSIF] + " debe ser de tipo " + tokenImage[tBOOL] + ".";
}
{
	<tIF>	  type = expresion(null, null) 
	{
		if (type != Symbol.Types.BOOL) { // Comprobar que la guarda es de tipo BOOL
			semantic.error(getToken(0), errorMsg);
		}
	}
	<tTHEN> ( instruccion() )+
	(<tELSIF> type = expresion(null, null)
	{
		if (type != Symbol.Types.BOOL) { // Comprobar que la guarda es de tipo BOOL
			semantic.error(getToken(0), errorMsg);
		}
	} <tTHEN> ( instruccion() )+ )* 
	(<tELSE> ( instruccion() )+ )? 
	<tEND> <tIF>
}

//inst_while: <tWHILE> expresion <tLOOP> instruccion+ <tENDLOOP>
void inst_while() : 
{
	Symbol.Types type;
}
{
	<tWHILE> type = expresion(null, null)
	{
		if (type != Symbol.Types.BOOL) { // Comprobar que la guarda es de tipo BOOL
			semantic.error(getToken(0), "La guarda de un bucle " + tokenImage[tWHILE] + " debe ser de tipo " + tokenImage[tBOOL] + ".");
		}
	}
	<tLOOP> ( instruccion() )+ <tEND> <tLOOP>
}

//inst_return: <tRETURN> (expresion)?
void inst_return() : 
{
	Symbol.Types returnType;
}
{
	<tRETURN> returnType = expresion(null, null) 
	{
		semantic.inst_return(getToken(0), returnType);
	}
}

/*--------------------------------------- EXPRESIONES ---------------------------------------*/ 

//expresion: relacion ((<tAND> | <tOR>) relacion)*
//expresion: relacion ( (<tAND> relacion)+ | (<tOR> relacion)+ )?
Symbol.Types expresion(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type;
	boolean moreThanOne = false;
	String errorMsg = "Las relaciones de una expresión lógica deben ser de tipo " + tokenImage[tBOOL] + ".";
}
{
	type = relacion(param, esAsignable)
	(	(<tAND>
		{
			moreThanOne = true;
			if (type != Symbol.Types.BOOL)
				semantic.error(getToken(0), errorMsg);
		}
		type = relacion(null, null) 
		{
			// Si hay más de una relación, deben ser todas BOOL
			if (type != Symbol.Types.BOOL)
				semantic.error(getToken(0), errorMsg);
		}
		)+
		| (<tOR>
		{
			moreThanOne = true;
			if (type != Symbol.Types.BOOL)
				semantic.error(getToken(0), errorMsg);
		}
		type = relacion(null, null) 
		{
			// Si hay más de una relación, deben ser todas BOOL
			if (type != Symbol.Types.BOOL)
				semantic.error(getToken(0), errorMsg);
		}
		)+
	)?
	{
		if (moreThanOne && esAsignable != null) esAsignable[0] = false; // Si hay más de una relación, la expresión no es asignable
		return (moreThanOne) ? Symbol.Types.BOOL : type;
	}
}

//relacion: expresion_simple (operador_relacional expresion_simple)?
Symbol.Types relacion(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type1, type2 = Symbol.Types.UNDEFINED;
}
{
	type1 = expresion_simple(param, esAsignable)
 	( operador_relacional() type2 = expresion_simple(null, null) )?
	{
		// Puede haber una o dos expresiones, pero si hay dos, deben ser del mismo tipo
		if (type2 != Symbol.Types.UNDEFINED) {
			if (esAsignable != null) esAsignable[0] = false; // Si hay dos expresiones, la expresión no es asignable
			if (type1 != type2)
				semantic.error(getToken(0), "Las expresiones de una relación deben ser del mismo tipo, se encontró " + type1 + " y " + type2 + ".");

			return Symbol.Types.BOOL; // Si hay dos expresiones, el resultado es booleano
		}
		// else: si hay solo una expresión, se devuelve su tipo
		return type1;
	}
}

//operador_relacional: (<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>)
void operador_relacional() : {}
{
	(<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>)
}

//expresion_simple: ( <tPLUS> |	<tMINUS> )? termino ( ( <tPLUS> | <tMINUS> ) termino )*
Symbol.Types expresion_simple(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type;
	boolean sign = false;
}
{
    ((<tPLUS> | <tMINUS>) {sign = true;}  )? type = termino(param, esAsignable) 
	{
		if (sign && (type != Symbol.Types.INT)) {
			semantic.error(getToken(0), "Los signos " + tokenImage[tPLUS] + " y " + tokenImage[tMINUS] + 
					" solo se puede usar con expresiones de tipo " + tokenImage[tINT] + ", se encontró " + type + ".");
		}
	}
	(( <tPLUS> | <tMINUS> )  type = termino(null, null)
	{
		sign = true;
		// Si hay más de un término, deben ser todos INT
		if (type != Symbol.Types.INT) {
			semantic.error(getToken(0), 
				"Los términos de una suma o resta deben ser de tipo " + tokenImage[tINT] + ", se encontró " + type + ".");
		}
	}
	)*
	{
		if (sign && esAsignable != null) esAsignable[0] = false; // Si hay signo o más de un término, la expresión no es asignable
		return (sign) ? Symbol.Types.INT : type;
	}
}
                                                                                                                                                                         
//termino: factor (operador_multiplicativo factor)*
Symbol.Types termino(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type;
	boolean moreThanOne = false;
}
{
    type = factor(param, esAsignable) 
	( operador_multiplicativo()
		{
			moreThanOne = true;
			if (type != Symbol.Types.INT) {
				semantic.error(getToken(0), 
						"Los factores de una multiplicación, división y módulo deben ser de tipo " + tokenImage[tINT] + ", se encontró " + type + ".");
			}
		}
	type = factor(null, null)
		{ 
			// Si hay más de un factor, deben ser todos INT
			if (type != Symbol.Types.INT) {
				semantic.error(getToken(0), 
						"Los factores de una multiplicación, división y módulo deben ser de tipo " + tokenImage[tINT] + ", se encontró " + type + ".");
			}
		}
	)*
	{
		if (moreThanOne && esAsignable != null) esAsignable[0] = false; // Si hay más de un factor, la expresión no es asignable
		return (moreThanOne) ? Symbol.Types.INT : type;
	}
}

//operador_multiplicativo: (<tMULT> | <tDIV> | <tMOD>)
void operador_multiplicativo() : {}
{
	(<tMULT> | <tDIV> | <tMOD>)
}

//factor: (<tNOT>)? primario
Symbol.Types factor(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type;
	boolean not = false;
}
{
	( <tNOT> {not = true;} )? type = primario(param, esAsignable) 
	{
		// Comprobar que el operador 'not' solo se puede usar con variables de tipo BOOL
		if (not) {
			if (esAsignable != null) esAsignable[0] = false;
			if (type != Symbol.Types.BOOL) {
				semantic.error(getToken(0), "El operador " + tokenImage[tNOT] + 
						" solo se puede usar con variables de tipo " + tokenImage[tBOOL] + ".");
			}
			return Symbol.Types.BOOL;
		}
		return type;
	}
}

//primario: <tLPAREN> expresion <tRPAREN> | <tINT2CHAR> <tLPAREN> expresion <tRPAREN> | <tCHAR2INT> <tLPAREN> expresion <tRPAREN> 
//			| <tID> (<tLPAREN> lista_una_o_mas_exps <tRPAREN>)? | <tID> | <tCONST_INT> | <tCONST_CHAR> | <tTRUE> | <tFALSE>
Symbol.Types primario(Token param, boolean[] esAsignable) : 
{
	Symbol.Types type = Symbol.Types.UNDEFINED;
	Token id;
}
{
	(			    <tLPAREN> type = expresion(null, null) <tRPAREN>
	|	<tINT2CHAR> <tLPAREN> type = expresion(null, null) <tRPAREN>
	{
		// La expresión debe ser de tipo INT
		if (type != Symbol.Types.INT) semantic.error(getToken(0), "La expresión debe ser de tipo " + tokenImage[tINT] + ".");
		type = Symbol.Types.CHAR;
	}
	|	<tCHAR2INT> <tLPAREN> type = expresion(null, null) <tRPAREN>
	{
		// La expresioón debe ser de tipo CHAR
		if (type != Symbol.Types.CHAR) semantic.error(getToken(0), "La expresión debe ser de tipo " + tokenImage[tINT] + ".");
		type = Symbol.Types.INT;
	}
	|	LOOKAHEAD (2) id = <tID> <tLPAREN> lista_una_o_mas_exps(id) <tRPAREN> //invocar func. (con parámetros) o comp. array
	{
		Symbol symbol = semantic.getSymbol(id);
		if (symbol == null) return Symbol.Types.UNDEFINED;

		switch (symbol.type) {
			// Si es una función, devolver su tipo retorno
			case FUNCTION: type = ((SymbolFunction) symbol).returnType; break;
			case PROCEDURE: // Checkear que no es procedimiento
				semantic.error(id, "No se puede invocar un procedimiento en una expresión como a una función.");
				break;
			case ARRAY:
				type = ((SymbolArray) symbol).baseType; // Si es un array, devolver su tipo base
				if (esAsignable != null) esAsignable[0] = true;
				id.clone(param);
				break;
			default: type = symbol.type;
		}
	}
	|	id = <tID> // variable simple o func/proced sin parámetros
	{
		Symbol symbol = semantic.getSymbol(id);
		if (symbol == null) return Symbol.Types.UNDEFINED;

		switch (symbol.type) {
			case FUNCTION: // Checkear que la función no tiene parámetros
				SymbolFunction function = (SymbolFunction) symbol;
				if (function.parList.size() > 0) {
					semantic.error(id, "La función '" + id.image + "' debe invocarse con " + function.parList.size() + " argumentos.");
				}
				type = function.returnType;
				break;
			case PROCEDURE: // Checkear que no es procedimiento 
				semantic.error(id, "No se puede invocar un procedimiento en una expresión como a una variable.");
				break;
			case ARRAY:
				// Si es un array y no se espera un parámetro, debe accederse a un elemento
				if (param == null) semantic.error(id, "En una expresión debe accederse a un elemento del array '" + id.image + "'.");
			default:
				id.clone(param);
				if (esAsignable != null) esAsignable[0] = true;
				type = symbol.type;
		}
	}
	|	<tCONST_INT>  {type = Symbol.Types.INT; }
	|	<tCONST_CHAR> {type = Symbol.Types.CHAR;}
	|	<tTRUE> 	  {type = Symbol.Types.BOOL;}
	|	<tFALSE> 	  {type = Symbol.Types.BOOL;}
	)
	{
		return type;
	}
}

//lista_una_o_mas_exps: expresion() ( <tCOMMA> expresion() )*
void lista_una_o_mas_exps(Token id) : 
{ // Se ejecuta en una invocación de función o procedimiento y en el acceso a un array en una expresión
	List<Symbol.Types> types = new ArrayList<>();
	Map<Token, Boolean> args = new LinkedHashMap<>();
	boolean[] esAsignable = {false};

	Symbol.Types type;
	Symbol symbol = semantic.getSymbol(id);
	if (symbol == null) return;
	
	Token t = new Token(0);
}
{
	type = expresion(t, esAsignable)
	{
		types.add(type);
		if (t.kind == 0) args.put(getToken(0), false);
		else 			 args.put(t, esAsignable[0]);
		esAsignable[0] = false;
		t = new Token(0);
	}
	( <tCOMMA> type = expresion(t, esAsignable) 
		{ // Iterate over all the parameters
			types.add(type);
			if (t.kind == 0) args.put(getToken(0), false); // Si no se ha sobrescrito t, se añade el token actual
			else 			 args.put(t, esAsignable[0]);
			esAsignable[0] = false;
			t = new Token(0);
		}
	)*
	{
		if (symbol.type == Symbol.Types.FUNCTION || symbol.type == Symbol.Types.PROCEDURE) {

			// Recuperar lista parámetros del Token 'id' 
			List<Symbol> parList = (symbol instanceof SymbolFunction) ? ((SymbolFunction) symbol).parList : ((SymbolProcedure) symbol).parList;

			// Comprobar que el número de argumentos coincide con el número de parámetros
			String msg = (symbol.type == Symbol.Types.FUNCTION) ? "de la función" : "del procedimiento";
			msg += " '" + id.image + "'";
			if (types.size() != parList.size()) {
				semantic.error(id, "El número de argumentos no coincide con el número de parámetros " + msg);
				return;
			}
			List<Token> tokenArgs = new ArrayList<>(args.keySet());
			List<Boolean> assignables = new ArrayList<>(args.values());

			// Comprobar que los tipos de los argumentos coinciden con los tipos de los parámetros
			for (int i = 0; i < types.size(); i++) {
				if (types.get(i) != parList.get(i).type) {
					semantic.error(id, "El tipo " + types.get(i) + " del argumento nº " + (i + 1) + " no coincide con el tipo " + parList.get(i).type + " del parámetro " + msg);
					continue;
				}

				// System.out.println(i);
				// System.out.println(parList.get(i));
				Token arg = tokenArgs.get(i);

				if (parList.get(i).type == Symbol.Types.ARRAY) {

					// Si el parámetro debe ser un array, da igual si es por valor o referencia ya que el argumento debe ser un array entero
					SymbolArray paramArray = (SymbolArray) parList.get(i);

					// Si el argumento es un array, comprobar que el tipo base y el rango de índices coinciden (del parámetro y argumento)
					SymbolArray argArray = (SymbolArray) semantic.getSymbol(arg);
					
					if (argArray.baseType != paramArray.baseType) {
						semantic.error(arg, "El tipo base del vector '" + arg + "' no coincide con el tipo base del parámetro " + (i + 1) + " " + msg);
					}
					if (argArray.minInd != paramArray.minInd || argArray.maxInd != paramArray.maxInd) {
						semantic.error(arg, "El rango de índices del vector '" + arg  + "' no coincide con el rango de índices del parámetro " + (i + 1) + " " + msg);
					}
				} else {
					// Si el parámetro es simple y por valor, no hay que comprobar nada más
					// Si el parámetro es simple por referencia, además el argumento debe ser un asignable (id o componente de array del mismo tipo)
					if (parList.get(i).parClass == Symbol.ParameterClass.REF) {
						if (!assignables.get(i)) {
							semantic.error(arg, "El argumento nº " + (i + 1) + " no es una variable asignable para el parámetro por referencia " + msg);
						}
					}
				}
			}
		} else if (symbol.type == Symbol.Types.ARRAY) {
			SymbolArray array = (SymbolArray) symbol;
			if (types.size() != 1) {
				semantic.error(id, "El acceso a un array debe tener un único índice.");
			}
			if (types.get(0) != Symbol.Types.INT) {
				semantic.error(id, "El índice de un array debe ser de tipo " + tokenImage[tINT] + ".");
			}
		} else { // Si id es un tipo simple, no puede accederse a un elemento
			semantic.error(id, "No se puede acceder a un elemento del símbolo '" + id.image + "' por ser de tipo " + symbol.type + " y no  " + tokenImage[tARRAY] + ".");
		}
	}
}
