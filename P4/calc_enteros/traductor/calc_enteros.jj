//*****************************************************************
// File:   calc_enteros.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2021
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
 	IGNORE_CASE = false;
 	DEBUG_PARSER = false;
}

PARSER_BEGIN(calc_enteros)

package traductor;

import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;

public class calc_enteros {
	//tabla de símbolos global
	static SymbolTable st;

	private static void initSymbolTable() {
		boolean b;
		String[] palsRes = {
	    	"var","const","escribir"
		};

		st.insertReservedWords(palsRes);
	}
	
    public static void main(String[] args) {
    	calc_enteros parser;

    	st = new SymbolTable();
    	initSymbolTable();
    	
    	try {
	    	if(args.length == 0) {
				parser = new calc_enteros(System.in);
			}
			else {
	            parser = new calc_enteros(new java.io.FileInputStream(args[0]));
			}
			//Programa es el símbolo inicial de la gramática
			parser.calc();
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
            System.err.println("SINT_ERROR: " + e.getMessage());
        } 
        catch(Exception e) {
  			System.err.println("Finalizo traducción por detección de error no controlado: \n\t"
  				               + e.getMessage());
		}
    }
}
PARSER_END(calc_enteros)
SKIP : {
	" "
|	"\t"
|	"\n"
|	"\r"
|	"\r\n"	
}

TOKEN : {
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

TOKEN : {
	< tNUM: (<DIGIT>)+>
| 	< tCONST: "const" >
| 	< tVAR: "var" >
|	< tWRITE: "escribir" >
|	< tASS: "=" >
| 	< tID: <LETTER>(<LETTER>|<DIGIT>|"_")* >
|	< tPC: ";" >
|	< tMAS: "+" >
|	< tMENOS: "-" >
|	< tPROD: "*" >
|	< tDIV: "/" >
|	< tAP: "(" >
|	< tCP: ")" >
}

SPECIAL_TOKEN : {
 	< tBASURA: ~[] >
	 	{
			System.err.println("Carácter extraño. Reemplazo por espacio");
			matchedToken.image = " ";
	 	}
}
//---------------------------------------------------------
//calc: (dec_constantes)? (dec_variables)? (instrucciones)+
void calc () : 
{

}
{
	(dec_constantes())? (dec_variables())? (instrucciones())+
}

//dec_constantes: (dec_constante)+
void dec_constantes() :
{

}
{
	(
		dec_constante()
	)+
}

//dec_constante: < tCONST > < tASS > < tNUM > < tPC >
void dec_constante() :
{
	Token t1,t2;
}
{
	< tCONST > 
	t1 = < tID > 
	< tASS > 
	t2 = < tNUM > 
	< tPC >
		{
			SymbolInt s = new SymbolInt(t1.image);
			s.constant = true;
			s.value = Integer.parseInt(t2.image);
			try {
				st.insertSymbol(s);
			}
			catch (AlreadyDefinedSymbolException e) {
				System.err.println("Error: " + t1.image + " ya está declarado");
			}
		}
}

//dec_variables: (dec_variable)+
void dec_variables() :
{

}
{
	( dec_variable() )+
}

//dec_variable:  < tVAR > < tID > < tPC >
void dec_variable() :
{
	Token t;
}
{
	< tVAR >
	t = < tID >
	< tPC >
		{
			SymbolInt s = new SymbolInt(t.image);
			s.constant = false;
			try {
				st.insertSymbol(s);
			}
			catch (AlreadyDefinedSymbolException e) {
				System.err.println("Error: " + t.image + " ya está declarado");
			}
		}
}

//instrucciones: (instruccion)+
void instrucciones() :
{

}
{
	( instruccion() < tPC >)+ < EOF >
}

void instruccion() :
{

}
{
	inst_asignacion()
|	inst_escribir()
}

void inst_asignacion() :
{
	Token t;
	int val;
}
{
	t = < tID >
	< tASS >
	val = expresion()
		{
			try {
				SymbolInt s = (SymbolInt)st.getSymbol(t.image);
				if(s.constant) {
					System.err.println("Error: " + t.image + " es una cte. usada como variable");
				}
				s.value = val;
			}
			catch (SymbolNotFoundException e) {
				System.err.println("Error: " + t.image + " no está declarado");
			}
		}
}

void inst_escribir() :
{
	int val;
}
{
	< tWRITE >
	val = expresion()
		{
			System.out.println("--> " +  val);
		}
}

int expresion() :
{ 
	Token t;
	int val1,val2;
	int val = 0;
}
{ 	
	val1 = termino(val) 
	val2 = expresion_plus(val1)
		{
			return val2;
		}
}

int expresion_plus(int val) :
{ 
	Token t;
	int val1,val2;
}
{ 	
	< tMAS > 
	val1 = termino(val) 
	val2 = expresion_plus(val+val1)
		{
			return val2;
		}
|	< tMENOS >
	val1 = termino(val) 
	val2 = expresion_plus(val-val1)
		{
			return val2;
		}
|
		{
			return val;
		}
}

int termino(int val) :
{ 
	int val1,val2;
}
{
	val1 = factor()
	val2 = termino_plus(val1)
		{
			return val2;
		}
}

int termino_plus(int val) :
{ 
	Token t;
	int val1,val2;
}
{ 	
	< tPROD > 
	val1 = factor()
	val2 = termino_plus(val*val1)
		{
			return val2;
		}
|	< tDIV >
	val1 = factor()
	val2 = termino_plus(val/val1)
		{
			return val2;
		}
|
		{
			return val;
		}
}

int factor() :
{ 
	Token t;
	SymbolInt s = null;
	int val;
}
{
	< tAP >
	val = expresion()
	< tCP >
		{
			return val;
		}
|	t = < tID >
		{
			try {
				s = (SymbolInt)st.getSymbol(t.image);
			}
			catch (SymbolNotFoundException e) {
				System.err.println(t.image + " no está declarado");
			}
			return s.value;
		}
|	t = < tNUM >
		{
			return Integer.parseInt(t.image);
		}
|	t = < tMAS >
	val = factor()
		{
			return val;
		}
|	t = < tMENOS >
	val = factor()
		{
			return -val;
		}
}
