/* alike.java */
/* Generated By:JavaCC: Do not edit this line. alike.java */
package traductor;

public class alike implements alikeConstants {
        // Variable global necesaria para controlar la derivabilidad de la instrucci칩n 'return' 
        // dependiendo de si nos encontramos en una funci칩n o en un procedimiento. 
   static boolean inFunction = false;

   public static void main(String[] args) {
           alike parser = null;

           try {
                   if(args.length == 0) {
                           parser = new alike(System.in);
                   }
                   else {
                           parser = new alike(new java.io.FileInputStream(args[0]));
                   }
                   //Programa es el s칤mbolo inicial de la gram치tica
                   parser.Programa();
                   //...
                   System.out.println("***** An\u00e1lisis terminado con \u00e9xito *****");
           }
           catch (java.io.FileNotFoundException e) {
                   System.err.println ("Fichero " + args[0] + " no encontrado.");
           }
           catch (TokenMgrError e) {
                // 游꾺 游녢游낖游녢游낖游녢游낖 游꾺
                // Tiene que quedar el mensaje as칤
                // ERROR L칄XICO: (<l칤nea, columna>): s칤mbolo no reconocido: <s칤mbolo>
                   System.err.println("ERROR L\u00c9XICO: " + e.getMessage());
           }
           catch (ParseException e) {
                   System.err.println("PARSER_ERROR: " + e.getMessage());
           }
           catch (Exception e) {
                   e.printStackTrace();
           }
   }

//-------------------游녢游낖 Analizador sint치ctico 游녢游낖-------------------

//------------ S칤mbolo inicial de la gram치tica.
// Programa: <tPROCEDURE> <tID> <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instruccion* <tEND> <tSEMICOLON> <EOF>
  static final public void Programa() throws ParseException {
    jj_consume_token(tPROCEDURE);
    jj_consume_token(tID);
    jj_consume_token(tIS);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declaracion_var();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
    label_3:
    while (true) {
      instruccion();
      if (jj_2_1(1)) {
        ;
      } else {
        break label_3;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
    jj_consume_token(0);
}

//declaracion_var: lista_ids <tCOLON> tipo_variable <tSEMICOLON>
  static final public void declaracion_var() throws ParseException {
    lista_ids();
    jj_consume_token(tCOLON);
    tipo_variable();
    jj_consume_token(tSEMICOLON);
}

//lista_ids: <tID> (<tCOMMA> <tID>)*
  static final public void lista_ids() throws ParseException {
    jj_consume_token(tID);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_4;
      }
      jj_consume_token(tCOMMA);
      jj_consume_token(tID);
    }
}

//tipo_variable: (tipo_variable_simple | tipo_variable_array)
  static final public void tipo_variable() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tINT:
    case tCHAR:
    case tBOOL:{
      tipo_variable_simple();
      break;
      }
    case tARRAY:{
      tipo_variable_array();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//tipo_variable_simple: <tINT> | <tCHAR> | <tBOOL>
  static final public void tipo_variable_simple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tINT:{
      jj_consume_token(tINT);
      break;
      }
    case tCHAR:{
      jj_consume_token(tCHAR);
      break;
      }
    case tBOOL:{
      jj_consume_token(tBOOL);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//tipo_variable_array: <tARRAY> <tLPAREN> <tCONST_INT> <tRANGE> <tCONST_INT> <tRPAREN> <tOF> tipo_variable_simple
  static final public void tipo_variable_array() throws ParseException {
    jj_consume_token(tARRAY);
    jj_consume_token(tLPAREN);
    jj_consume_token(tCONST_INT);
    jj_consume_token(tRANGE);
    jj_consume_token(tCONST_INT);
    jj_consume_token(tRPAREN);
    jj_consume_token(tOF);
    tipo_variable_simple();
}

//declaracion_procedimiento: cabecera_procedimiento (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
  static final public void declaracion_procedimiento() throws ParseException {
    jj_consume_token(tPROCEDURE);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      lista_parametros();
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(tIS);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_5;
      }
      declaracion_var();
    }
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
    label_7:
    while (true) {
      instruccion();
      if (jj_2_2(1)) {
        ;
      } else {
        break label_7;
      }
    }
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
}

//declaracion_funcion: <tFUNCTION> <tID> ( <tLPAREN> lista_parametros <tRPAREN> )? <tRETURN> tipo_variable <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
  static final public void declaracion_funcion() throws ParseException {
    jj_consume_token(tFUNCTION);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      lista_parametros();
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(tRETURN);
    tipo_variable_simple();
    jj_consume_token(tIS);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tID:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_8;
      }
      declaracion_var();
    }
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:
      case tFUNCTION:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPROCEDURE:{
        declaracion_procedimiento();
        break;
        }
      case tFUNCTION:{
        declaracion_funcion();
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tBEGIN);
alike.inFunction = true;
    label_10:
    while (true) {
      instruccion();
      if (jj_2_3(1)) {
        ;
      } else {
        break label_10;
      }
    }
alike.inFunction = false;
    jj_consume_token(tEND);
    jj_consume_token(tSEMICOLON);
}

//lista_parametros: parametro_formal (<tSEMICOLON> parametro_formal)*
  static final public void lista_parametros() throws ParseException {
    parametro_formal();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tSEMICOLON:{
        ;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        break label_11;
      }
      jj_consume_token(tSEMICOLON);
      parametro_formal();
    }
}

//parametro_formal: lista_ids <tCOLON> <tREF>? tipo_variable
  static final public void parametro_formal() throws ParseException {
    lista_ids();
    jj_consume_token(tCOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tREF:{
      jj_consume_token(tREF);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    tipo_variable();
}

/*------------------------------------------- INSTRUCCIONES -------------------------------------------*/


//instruccion: (inst_leer | <tSKIP_LINE> | inst_escribir | inst_escribir_linea | inst_invocacion_procedimiento | inst_asignacion | inst_if | inst_while | inst_return | <tNULL>) <tSEMICOLON>
// 'inst_return' solamente es derivable si estamos dentro de una funci칩n. Este comportamiento se consigue gracias al LOOKAHEAD sint치ctico.
  static final public void instruccion() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tGET:{
      inst_leer();
      break;
      }
    case tSKIP_LINE:{
      jj_consume_token(tSKIP_LINE);
      break;
      }
    case tPUT:{
      inst_escribir();
      break;
      }
    case tPUT_LINE:{
      inst_escribir_linea();
      break;
      }
    case tID:{
      inst_invocacion_procedimiento_o_asignacion();
      break;
      }
    case tIF:{
      inst_if();
      break;
      }
    case tWHILE:{
      inst_while();
      break;
      }
    case tNULL:{
      jj_consume_token(tNULL);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      if (alike.inFunction) {
        inst_return();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tSEMICOLON);
}

//inst_leer: <tGET> <tLPAREN> <tID> (array_component)? ( <tCOMMA> <tID> (array_component)? )* <tRPAREN>
  static final public void inst_leer() throws ParseException {
    jj_consume_token(tGET);
    jj_consume_token(tLPAREN);
    jj_consume_token(tID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      array_component();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        break label_12;
      }
      jj_consume_token(tCOMMA);
      jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        array_component();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
    }
    jj_consume_token(tRPAREN);
}

//array_component: <tLPAREN> expresion <tRPAREN>
  static final public void array_component() throws ParseException {
    jj_consume_token(tLPAREN);
    expresion();
    jj_consume_token(tRPAREN);
}

//inst_escribir: <tPUT> <tLPAREN> (<tCONST_STRING> | expresion) ( <tCOMMA> (<tCONST_STRING> | expresion) )* <tRPAREN>
  static final public void inst_escribir() throws ParseException {
    jj_consume_token(tPUT);
    jj_consume_token(tLPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tCONST_STRING:{
      jj_consume_token(tCONST_STRING);
      break;
      }
    case tLPAREN:
    case tINT2CHAR:
    case tCHAR2INT:
    case tTRUE:
    case tFALSE:
    case tCONST_INT:
    case tCONST_CHAR:
    case tNOT:
    case tPLUS:
    case tMINUS:
    case tID:{
      expresion();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_13;
      }
      jj_consume_token(tCOMMA);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCONST_STRING:{
        jj_consume_token(tCONST_STRING);
        break;
        }
      case tLPAREN:
      case tINT2CHAR:
      case tCHAR2INT:
      case tTRUE:
      case tFALSE:
      case tCONST_INT:
      case tCONST_CHAR:
      case tNOT:
      case tPLUS:
      case tMINUS:
      case tID:{
        expresion();
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(tRPAREN);
}

//inst_escribir_linea: <tPUT_LINE> (<tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>)?
  static final public void inst_escribir_linea() throws ParseException {
    jj_consume_token(tPUT_LINE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCONST_STRING:{
        jj_consume_token(tCONST_STRING);
        break;
        }
      case tLPAREN:
      case tINT2CHAR:
      case tCHAR2INT:
      case tTRUE:
      case tFALSE:
      case tCONST_INT:
      case tCONST_CHAR:
      case tNOT:
      case tPLUS:
      case tMINUS:
      case tID:{
        expresion();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCOMMA:{
          ;
          break;
          }
        default:
          jj_la1[24] = jj_gen;
          break label_14;
        }
        jj_consume_token(tCOMMA);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case tCONST_STRING:{
          jj_consume_token(tCONST_STRING);
          break;
          }
        case tLPAREN:
        case tINT2CHAR:
        case tCHAR2INT:
        case tTRUE:
        case tFALSE:
        case tCONST_INT:
        case tCONST_CHAR:
        case tNOT:
        case tPLUS:
        case tMINUS:
        case tID:{
          expresion();
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(tRPAREN);
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
}

//inst_invocacion_procedimiento_o_asignacion: <tID> ( inst_asignacion | inst_invocacion_procedimiento )
  static final public void inst_invocacion_procedimiento_o_asignacion() throws ParseException {
    jj_consume_token(tID);
    if (jj_2_4(2147483647)) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        array_component();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
      jj_consume_token(tASSIGN);
      expresion();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        jj_consume_token(tLPAREN);
        expresion();
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case tCOMMA:{
            ;
            break;
            }
          default:
            jj_la1[28] = jj_gen;
            break label_15;
          }
          jj_consume_token(tCOMMA);
          expresion();
        }
        jj_consume_token(tRPAREN);
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
    }
}

//inst_if: <tIF> expresion <tTHEN> instruccion+ (<tELSIF> expresion <tTHEN> instruccion+)* (<tELSE> instruccion+)? <tENDIF>
  static final public void inst_if() throws ParseException {
    jj_consume_token(tIF);
    expresion();
    jj_consume_token(tTHEN);
    label_16:
    while (true) {
      instruccion();
      if (jj_2_5(1)) {
        ;
      } else {
        break label_16;
      }
    }
    label_17:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tELSIF:{
        ;
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        break label_17;
      }
      jj_consume_token(tELSIF);
      expresion();
      jj_consume_token(tTHEN);
      label_18:
      while (true) {
        instruccion();
        if (jj_2_6(1)) {
          ;
        } else {
          break label_18;
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tELSE:{
      jj_consume_token(tELSE);
      label_19:
      while (true) {
        instruccion();
        if (jj_2_7(1)) {
          ;
        } else {
          break label_19;
        }
      }
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    jj_consume_token(tENDIF);
}

//inst_while: <tWHILE> expresion <tLOOP> instruccion+ <tENDLOOP>
  static final public void inst_while() throws ParseException {
    jj_consume_token(tWHILE);
    expresion();
    jj_consume_token(tLOOP);
    label_20:
    while (true) {
      instruccion();
      if (jj_2_8(1)) {
        ;
      } else {
        break label_20;
      }
    }
    jj_consume_token(tENDLOOP);
}

//inst_return: <tRETURN> (expresion)?
  static final public void inst_return() throws ParseException {
    jj_consume_token(tRETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:
    case tINT2CHAR:
    case tCHAR2INT:
    case tTRUE:
    case tFALSE:
    case tCONST_INT:
    case tCONST_CHAR:
    case tNOT:
    case tPLUS:
    case tMINUS:
    case tID:{
      expresion();
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      ;
    }
}

/*--------------------------------------- EXPRESIONES ---------------------------------------*/

//expresion: relacion ((<tAND> | <tOR>) relacion)*
  static final public void expresion() throws ParseException {
    relacion();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:
      case tOR:{
        ;
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        break label_21;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tAND:{
        jj_consume_token(tAND);
        break;
        }
      case tOR:{
        jj_consume_token(tOR);
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      relacion();
    }
}

//relacion: expresion_simple (operador_relacional expresion_simple)?
  static final public void relacion() throws ParseException {
    expresion_simple();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:
    case tNEQ:
    case tLT:
    case tLE:
    case tGT:
    case tGE:{
      operador_relacional();
      expresion_simple();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
}

//operador_relacional: (<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>)
  static final public void operador_relacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tEQ:{
      jj_consume_token(tEQ);
      break;
      }
    case tLT:{
      jj_consume_token(tLT);
      break;
      }
    case tGT:{
      jj_consume_token(tGT);
      break;
      }
    case tLE:{
      jj_consume_token(tLE);
      break;
      }
    case tGE:{
      jj_consume_token(tGE);
      break;
      }
    case tNEQ:{
      jj_consume_token(tNEQ);
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//expresion_simple: ( <tPLUS> |	<tMINUS> )? termino ( ( <tPLUS> | <tMINUS> ) termino )*
  static final public void expresion_simple() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tPLUS:
    case tMINUS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    termino();
    label_22:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:
      case tMINUS:{
        ;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        break label_22;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tPLUS:{
        jj_consume_token(tPLUS);
        break;
        }
      case tMINUS:{
        jj_consume_token(tMINUS);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      termino();
    }
}

//termino: factor (operador_multiplicativo factor)*
  static final public void termino() throws ParseException {
    factor();
    label_23:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tMULT:
      case tDIV:
      case tMOD:{
        ;
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        break label_23;
      }
      operador_multiplicativo();
      factor();
    }
}

//operador_multiplicativo: (<tMULT> | <tDIV> | <tMOD>)
  static final public void operador_multiplicativo() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tMULT:{
      jj_consume_token(tMULT);
      break;
      }
    case tDIV:{
      jj_consume_token(tDIV);
      break;
      }
    case tMOD:{
      jj_consume_token(tMOD);
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//factor: (<tNOT>)? primario
  static final public void factor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tNOT:{
      jj_consume_token(tNOT);
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
    primario();
}

//primario: <tLPAREN> expresion <tRPAREN> | <tINT2CHAR> <tLPAREN> expresion <tRPAREN> | <tCHAR2INT> <tLPAREN> expresion <tRPAREN> 
//			| <tID> (<tLPAREN> lista_una_o_mas_exps <tRPAREN>)? | <tID> | <tCONST_INT> | <tCONST_CHAR> | <tTRUE> | <tFALSE>
  static final public void primario() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case tLPAREN:{
      jj_consume_token(tLPAREN);
      expresion();
      jj_consume_token(tRPAREN);
      break;
      }
    case tINT2CHAR:{
      jj_consume_token(tINT2CHAR);
      jj_consume_token(tLPAREN);
      expresion();
      jj_consume_token(tRPAREN);
      break;
      }
    case tCHAR2INT:{
      jj_consume_token(tCHAR2INT);
      jj_consume_token(tLPAREN);
      expresion();
      jj_consume_token(tRPAREN);
      break;
      }
    case tID:{
      jj_consume_token(tID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tLPAREN:{
        jj_consume_token(tLPAREN);
        lista_una_o_mas_exps();
        jj_consume_token(tRPAREN);
        break;
        }
      default:
        jj_la1[44] = jj_gen;
        ;
      }
      break;
      }
    case tCONST_INT:{
      jj_consume_token(tCONST_INT);
      break;
      }
    case tCONST_CHAR:{
      jj_consume_token(tCONST_CHAR);
      break;
      }
    case tTRUE:{
      jj_consume_token(tTRUE);
      break;
      }
    case tFALSE:{
      jj_consume_token(tFALSE);
      break;
      }
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

//lista_una_o_mas_exps: expresion() ( <tCOMMA> expresion() )*
  static final public void lista_una_o_mas_exps() throws ParseException {
    expresion();
    label_24:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case tCOMMA:{
        ;
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        break label_24;
      }
      jj_consume_token(tCOMMA);
      expresion();
    }
}

  static private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_3R_inst_leer_275_9_35()
 {
    if (jj_scan_token(tGET)) return true;
    return false;
  }

  static private boolean jj_3_7()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_termino_367_5_48()
 {
    if (jj_3R_factor_379_9_51()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_termino_367_16_52()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_expresion_simple_361_11_49()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    if (jj_3R_termino_367_5_48()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_267_5_33()
 {
    if (jj_3R_inst_return_332_9_41()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_359_7_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) return true;
    }
    return false;
  }

  static private boolean jj_3R_instruccion_265_5_32()
 {
    if (jj_3R_inst_while_324_9_40()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_264_5_31()
 {
    if (jj_3R_inst_if_315_9_39()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_259_10_27()
 {
    if (jj_3R_inst_leer_275_9_35()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_simple_359_5_45()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_expresion_simple_359_7_47()) jj_scanpos = xsp;
    if (jj_3R_termino_367_5_48()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expresion_simple_361_11_49()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_instruccion_263_5_30()
 {
    if (jj_3R_inst_invocacion_procedimiento_o_asignacion_302_9_38()) return true;
    return false;
  }

  static private boolean jj_3R_instruccion_259_9_25()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_instruccion_259_10_27()) {
    jj_scanpos = xsp;
    if (jj_scan_token(33)) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_261_5_28()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_262_5_29()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_263_5_30()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_264_5_31()) {
    jj_scanpos = xsp;
    if (jj_3R_instruccion_265_5_32()) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = alike.inFunction;
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3R_instruccion_267_5_33()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_instruccion_262_5_29()
 {
    if (jj_3R_inst_escribir_linea_295_9_37()) return true;
    return false;
  }

  static private boolean jj_3R_operador_relacional_353_9_50()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(48)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_instruccion_261_5_28()
 {
    if (jj_3R_inst_escribir_288_9_36()) return true;
    return false;
  }

  static private boolean jj_3R_expresion_340_21_44()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    if (jj_3R_relacion_346_9_43()) return true;
    return false;
  }

  static private boolean jj_3_1()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_relacion_347_11_46()
 {
    if (jj_3R_operador_relacional_353_9_50()) return true;
    if (jj_3R_expresion_simple_359_5_45()) return true;
    return false;
  }

  static private boolean jj_3_6()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3_5()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_relacion_346_9_43()
 {
    if (jj_3R_expresion_simple_359_5_45()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_relacion_347_11_46()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_expresion_340_9_42()
 {
    if (jj_3R_relacion_346_9_43()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_expresion_340_21_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_inst_return_332_9_41()
 {
    if (jj_scan_token(tRETURN)) return true;
    return false;
  }

  static private boolean jj_3_8()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3_3()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_inst_while_324_9_40()
 {
    if (jj_scan_token(tWHILE)) return true;
    return false;
  }

  static private boolean jj_3R_lista_una_o_mas_exps_399_23_61()
 {
    if (jj_scan_token(tCOMMA)) return true;
    if (jj_3R_expresion_340_9_42()) return true;
    return false;
  }

  static private boolean jj_3R_null_304_21_26()
 {
    if (jj_3R_array_component_282_9_34()) return true;
    return false;
  }

  static private boolean jj_3_4()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_304_21_26()) jj_scanpos = xsp;
    if (jj_scan_token(tASSIGN)) return true;
    return false;
  }

  static private boolean jj_3R_inst_if_315_9_39()
 {
    if (jj_scan_token(tIF)) return true;
    return false;
  }

  static private boolean jj_3_2()
 {
    if (jj_3R_instruccion_259_9_25()) return true;
    return false;
  }

  static private boolean jj_3R_lista_una_o_mas_exps_399_9_60()
 {
    if (jj_3R_expresion_340_9_42()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_lista_una_o_mas_exps_399_23_61()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_inst_invocacion_procedimiento_o_asignacion_302_9_38()
 {
    if (jj_scan_token(tID)) return true;
    return false;
  }

  static private boolean jj_3R_primario_389_16_59()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_lista_una_o_mas_exps_399_9_60()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_inst_escribir_linea_295_9_37()
 {
    if (jj_scan_token(tPUT_LINE)) return true;
    return false;
  }

  static private boolean jj_3R_primario_389_9_58()
 {
    if (jj_scan_token(tID)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primario_389_16_59()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_primario_388_9_57()
 {
    if (jj_scan_token(tCHAR2INT)) return true;
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_340_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_primario_387_9_56()
 {
    if (jj_scan_token(tINT2CHAR)) return true;
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_340_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_inst_escribir_288_9_36()
 {
    if (jj_scan_token(tPUT)) return true;
    return false;
  }

  static private boolean jj_3R_primario_386_5_55()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_340_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_primario_386_5_53()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_primario_386_5_55()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_387_9_56()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_388_9_57()) {
    jj_scanpos = xsp;
    if (jj_3R_primario_389_9_58()) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(41)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(39)) return true;
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_factor_379_9_51()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(46)) jj_scanpos = xsp;
    if (jj_3R_primario_386_5_53()) return true;
    return false;
  }

  static private boolean jj_3R_array_component_282_9_34()
 {
    if (jj_scan_token(tLPAREN)) return true;
    if (jj_3R_expresion_340_9_42()) return true;
    if (jj_scan_token(tRPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_termino_367_16_52()
 {
    if (jj_3R_operador_multiplicativo_373_9_54()) return true;
    if (jj_3R_factor_379_9_51()) return true;
    return false;
  }

  static private boolean jj_3R_operador_multiplicativo_373_9_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) {
    jj_scanpos = xsp;
    if (jj_scan_token(57)) return true;
    }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public alikeTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[47];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x300000,0x300000,0x40,0x8000e00,0xe00,0x80,0x0,0x300000,0x300000,0x80,0x0,0x300000,0x300000,0x10,0x400000,0xc0009000,0x80,0x40,0x80,0x80,0x40,0x80,0x80,0x40,0x80,0x80,0x80,0x40,0x80,0x20000,0x40000,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x80,0x40,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x4000023,0x0,0x0,0x0,0x46047cc,0x0,0x46047cc,0x46047cc,0x0,0x46047cc,0x0,0x0,0x0,0x0,0x0,0x0,0x46043cc,0x3000,0x3000,0x1f8000,0x1f8000,0x600000,0x600000,0x600000,0x600000,0x3800000,0x3800000,0x4000,0x0,0x40003cc,0x0,};
	}
  static final private JJCalls[] jj_2_rtns = new JJCalls[8];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public alike(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public alike(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public alike(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new alikeTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new alikeTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public alike(alikeTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(alikeTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 47; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = jj_lookingAhead ? jj_scanpos : token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[64];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 47; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 64; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 8; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
