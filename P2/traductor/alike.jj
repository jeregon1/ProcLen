//*****************************************************************
// File:   cl.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
	IGNORE_CASE = true;
	// COMMON_TOKEN_ACTION = true;
	// UNICODE_INPUT = true;
}

PARSER_BEGIN(alike)

package traductor;

public class alike {
   static boolean inFunction = false;
   
   public static void main(String[] args) {
	   alike parser = null;
	   
	   try {
		   if(args.length == 0) {
			   parser = new alike(System.in);
		   }
		   else {
			   parser = new alike(new java.io.FileInputStream(args[0]));
		   }
		   //Programa es el s칤mbolo inicial de la gram치tica
		   parser.Programa();
		   //...
		   System.out.println("***** An치lisis terminado con 칠xito *****");
	   }
	   catch (java.io.FileNotFoundException e) {
		   System.err.println ("Fichero " + args[0] + " no encontrado.");
	   }
	   catch (TokenMgrError e) {
		// Tiene que quedar el mensaje as칤
		// ERROR L칄XICO: (<l칤nea, columna>): s칤mbolo no reconocido: <s칤mbolo>
		   System.err.println("TokenMgrError: " + e.getMessage());
	   }
	   catch (ParseException e) {
		   System.err.println("PARSER_ERROR: " + e.getMessage());
	   }
	   
	   //...
   }
}
PARSER_END(alike)

//---------------------------------------------------------
// TOKEN_MGR_DECLS : {
// 	boolean inFunction = false;
// }

TOKEN : {
	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >

	// Separadores
|	< tSEMICOLON: ";" >
|	< tCOLON: ":" >
|	< tCOMMA: "," >

	// Delimitadores
|	< tLPAREN: "(" >
|	< tRPAREN: ")" >

	// Tipos de datos
|	< tINT: "integer" >
|	< tCHAR: "character" >
|	< tBOOL: "boolean" >

	// Palabras reservadas
|	< tWHILE: "while" > 
|   < tLOOP: "loop" >
|	< tENDLOOP: "end loop" >
|	< tIF: "if" >
|	< tTHEN: "then" >
|	< tELSIF: "elsif" >
|	< tELSE: "else" >
|	< tENDIF: "end if" >

|   < tPROCEDURE: "procedure" >
|   < tFUNCTION: "function" >
|   < tREF: "ref" >
|   < tIS: "is" >
|   < tBEGIN: "begin" >
|   < tEND: "end" >
|	< tRETURN: "return" > 

|   < tARRAY: "array" >
| 	< tOF: "of" >
|	< tRANGE: ".." >

	// Funciones est치ndar
| 	< tPUT: "put" >
| 	< tPUT_LINE: "put_line" >
|	< tGET: "get" >
|	< tSKIP_LINE: "skip_line" >
|	< tINT2CHAR: "int2char" >
|	< tCHAR2INT: "char2int" >
|	< tEXIT: "exit" >
|	< tNULL: "null" >

	// Literales
| 	< tTRUE: "true" >
| 	< tFALSE: "false" >
| 	< tCONST_INT: (<DIGIT>)+ >
|	< tCONST_CHAR: "'"~[]"'" >
|	< tCONST_STRING: "\"" ((~["\""] | "\"\""))* "\"" > // Dos comillas dobles seguidas se consideran una comilla doble

	// Operadores
|	< tASSIGN: ":=" > 
|	< tAND: "and" >
|	< tOR: "or" >
|	< tNOT: "not" >
|	< tEQ: "=" >
|	< tNEQ: "/=" >
|	< tLT: "<" >
|	< tLE: "<=" >
|	< tGT: ">" >
|	< tGE: ">=" >
|	< tPLUS: "+" >
|	< tMINUS: "-" >
|	< tMULT: "*" >
|	< tDIV: "/" >
|	< tMOD: "mod" >

	// Otros
|	< tID: (<LETTER> | "_") (<LETTER> | <DIGIT> | "_")* >

}

SKIP : { 
	" " | "\t" | "\n" | "\r" 
	|  <COMMENT: "--" (~["\n", "\r"])*> 
}


//-------------------游녢游낖 Analizador sint치ctico 游녢游낖-------------------

//------------ S칤mbolo inicial de la gram치tica.
// Programa: <tPROCEDURE> <tID> <tIS> (declaracion_variables())? (declaracion_procs_funcs())? <tBEGIN> instrucciones <tEND> <tPC> <EOF>
void Programa() : 
{
	Token t;
}
{
	<tPROCEDURE>
	<tID>
	<tIS>
	( declaracion_var() )*
	( declaracion_procedimiento() | declaracion_funcion() )*
	<tBEGIN>
	(instruccion())*
	<tEND>
	<tSEMICOLON>
	   
   < EOF >
}

//declaracion_var: lista_ids <tCOLON> tipo_variable
void declaracion_var() : {}
{
	lista_ids()
	<tCOLON>
	tipo_variable()
	<tSEMICOLON>
}

//lista_ids: <tID> (<tCOMMA> <tID>)*
void lista_ids() : {}
{
	<tID> (<tCOMMA> <tID>)*
}

//tipo_variable: (tipo_variable_simple | tipo_variable_array)
void tipo_variable() : {}
{
	( tipo_variable_simple() | tipo_variable_array() )
}

//tipo_variable_simple: <tINT> | <tCHAR> | <tBOOL>
void tipo_variable_simple() : {}
{
	( <tINT> | <tCHAR> | <tBOOL> )
}

//tipo_variable_array: <tARRAY> <tLPAREN> <tCONST_INT> <tRANGE> <tCONST_INT> <tRPAREN> <tOF> tipo_variable_simple
void tipo_variable_array() : {}
{
	<tARRAY> <tLPAREN> <tCONST_INT> <tRANGE> <tCONST_INT> <tRPAREN> <tOF> tipo_variable_simple()
}

//declaracion_procedimiento: cabecera_procedimiento (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
void declaracion_procedimiento() : {}
{
	<tPROCEDURE>
	<tID> // Puede NO tener par치metros
	( <tLPAREN> lista_parametros() <tRPAREN> )?
	<tIS>

	(declaracion_var())*
	( declaracion_procedimiento() | declaracion_funcion() )*
	<tBEGIN>
	(instruccion())*
	<tEND>
	<tSEMICOLON>
}

//declaracion_funcion: <tFUNCTION> <tID> ( <tLPAREN> lista_parametros <tRPAREN> )? <tRETURN> tipo_variable <tIS> (declaracion_var)* (declaracion_procedimiento | declaracion_funcion)* <tBEGIN> instrucciones <tEND>
void declaracion_funcion() : {}
{
	<tFUNCTION>
	<tID> // Puede NO tener par치metros
	( <tLPAREN> lista_parametros() <tRPAREN> )?
	<tRETURN>
	tipo_variable_simple()
	<tIS>

	(declaracion_var())*
	( declaracion_procedimiento() | declaracion_funcion() )*
	{alike.inFunction = true;}
	<tBEGIN>
	(instruccion())*
	<tEND>
	<tSEMICOLON>
	{alike.inFunction = false;}
}


//lista_parametros: parametro_formal (<tSEMICOLON> parametro_formal)*
void lista_parametros() : {}
{
	parametro_formal()
	( <tSEMICOLON> parametro_formal() )*
}

//parametro_formal: lista_ids <tCOLON> <tREF>? tipo_variable
void parametro_formal() : {}
{
	lista_ids()
	<tCOLON>
	( <tREF> )?
	tipo_variable()
	
}

/*--------------------------------------- INSTRUCCIONES ---------------------------------------*/ 


//instruccion: inst_leer | <tSKIP_LINE> | inst_escribir | inst_escribir_linea | inst_invocacion_procedimiento | inst_asignacion | inst_if | inst_while | inst_return | <tNULL>
void instruccion(): {}
{
	(inst_leer()
|	<tSKIP_LINE> // Nunca recibe argumentos
|   inst_escribir()
|   inst_escribir_linea()
|   inst_invocacion_procedimiento_o_asignacion()
|   inst_if()
|   inst_while()
// |   {if inFunction inst_return()}
|   LOOKAHEAD({ alike.inFunction }) inst_return()
|   <tNULL>
)
	<tSEMICOLON>
}

//inst_leer: <tGET> <tLPAREN> <tID> (<tCOMMA> <tID>)* <tRPAREN>
void inst_leer() : {}
{
	<tGET> // Necesita par치metros
	<tLPAREN> <tID> (array_component())? ( <tCOMMA> ( <tID> (array_component())? ) )* <tRPAREN>
}

//array_component: <tLPAREN> expresion <tRBRACKET>
void array_component() : {}
{
	<tLPAREN> expresion() <tRPAREN>
}

//inst_escribir: <tPUT> <tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>
void inst_escribir() : {}
{
	<tPUT> // Necesita par치metros
	<tLPAREN> expresion() ( <tCOMMA> expresion() )* <tRPAREN>
}

//inst_escribir_linea: <tPUT_LINE> (<tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>)?
void inst_escribir_linea() : {}
{
	<tPUT_LINE> // Puede NO tener par치metros
	(<tLPAREN> expresion() ( <tCOMMA> expresion() )* <tRPAREN>)?
}

//inst_invocacion_procedimiento_o_asignacion: <tID> ( inst_asignacion | inst_invocacion_procedimiento )
void inst_invocacion_procedimiento_o_asignacion() : {}
{
	<tID> ( inst_asignacion() | inst_invocacion_procedimiento() )
}

//asignacion: <tID> <tASSIGN> expresion
void inst_asignacion() : {}
{
	<tASSIGN>
	expresion()
}

//invocacion_procedimiento: <tID> (<tLPAREN> expresion (<tCOMMA> expresion)* <tRPAREN>)?
void inst_invocacion_procedimiento() : {}
{
	( <tLPAREN> expresion() ( <tCOMMA> expresion() )* <tRPAREN> )?
}

//inst_if: <tIF> expresion <tTHEN> instruccion+ (<tELSIF> expresion <tTHEN> instruccion+)* (<tELSE> instruccion+)? <tENDIF>
void inst_if() : {}
{
	<tIF>	  expresion() <tTHEN> ( instruccion() )+
	(<tELSIF> expresion() <tTHEN> ( instruccion() )+ )* 
	(<tELSE> 					  ( instruccion() )+ )? 
	<tENDIF>
}

//inst_while: <tWHILE> expresion <tLOOP> instruccion+ <tENDLOOP>
void inst_while() : {}
{
	<tWHILE> expresion() <tLOOP>
	(instruccion())+
	<tENDLOOP>
}

//inst_return: <tRETURN> (expresion)?
void inst_return() : {}
{
	<tRETURN> ( expresion() )?
}

/*--------------------------------------- EXPRESIONES ---------------------------------------*/ 

//expresion: relacion ((<tAND> | <tOR>) relacion)*
void expresion() : {}
{
	relacion() ((<tAND> | <tOR>) relacion())*
}

//relacion: expresion_simple (operador_relacional expresion_simple)?
void relacion() : {}
{
	expresion_simple()
 	( operador_relacional() expresion_simple() )?
}

//operador_relacional: (<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>)
void operador_relacional() : {}
{
	<tEQ> | <tLT> | <tGT> | <tLE> | <tGE> | <tNEQ>
}

//expresion_simple: ( <tPLUS> |	<tMINUS> )? termino ( ( <tPLUS> | <tMINUS> ) termino )*
void expresion_simple() : {}
{
    ( <tPLUS> |	<tMINUS> )? 
    termino()
	( ( <tPLUS> | <tMINUS> ) termino() )*
}

//termino: factor (operador_multiplicativo factor)*
void termino() : {}
{
    factor() ( operador_multiplicativo() factor() )*
}

//operador_multiplicativo: (<tMULT> | <tDIV> | <tMOD>)
void operador_multiplicativo() : {}
{
	(<tMULT> | <tDIV> | <tMOD>)
}

//factor: (<tNOT>)? primario
void factor() : {}
{
	( <tNOT> )? primario()
}

//primario: <tLPAREN> expresion <tRPAREN> | <tID> (<tLPAREN> lista_una_o_mas_exps <tRPAREN>)? | <tID> | <tCONST_INT> | <tCONST_CHAR> | <tCONST_STRING> | <tTRUE> | <tFALSE>
void primario() : 
{
	Token t;
}
{
    <tLPAREN> expresion() <tRPAREN>
|	<tINT2CHAR> <tLPAREN> expresion() <tRPAREN>
|	<tCHAR2INT> <tLPAREN> expresion() <tRPAREN>
|	LOOKAHEAD(2)
    <tID> (<tLPAREN> lista_una_o_mas_exps() <tRPAREN>)? //invocar func. o comp. array
|	<tID>              //var. o func. sin pars
|	<tCONST_INT>
|	<tCONST_CHAR>
|	<tCONST_STRING> //rn sf.primario_8(t);
|	<tTRUE>
|	<tFALSE>
}

//lista_una_o_mas_exps: expresion() ( <tCOMMA> expresion() )*
void lista_una_o_mas_exps(): {}
{
	expresion() ( <tCOMMA> expresion() )*
}
