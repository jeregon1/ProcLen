//*****************************************************************
// File:   calc_enteros.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
// Date:   julio 2021
// Coms:   compilar mediante "ant"
//         Ejemplo de analzado sintáctico
//*****************************************************************

options {
 	IGNORE_CASE = false;
 	DEBUG_PARSER = false;
}

PARSER_BEGIN(calc_enteros)

package traductor;

public class calc_enteros {
    public static void main(String[] args) {
    	calc_enteros parser;
    	
    	try {
	    	if(args.length == 0) {
				parser = new calc_enteros(System.in);
			}
			else {
	            parser = new calc_enteros(new java.io.FileInputStream(args[0]));
			}
			//Programa es el símbolo inicial de la gramática
			parser.calc();
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println ("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
        catch (ParseException e) {
            System.err.println("Svoid_ERROR: " + e.getMessage());
        } 
        catch(Exception e) {
  			System.err.println("Finalizo traducción por detección de error no controlado: \n\t"
  				               + e.getMessage());
		}
    }
}
PARSER_END(calc_enteros)
SKIP : {
	" "
|	"\t"
|	"\n"
|	"\r"
|	"\r\n"	
}

TOKEN : {
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
}

TOKEN : {
	< tNUM: (<DIGIT>)+>
| 	< tCONST: "const" >
| 	< tVAR: "var" >
|	< tWRITE: "escribir" >
|	< tASS: "=" >
| 	< tID: <LETTER>(<LETTER>|<DIGIT>|"_")* >
|	< tPC: ";" >
|	< tMAS: "+" >
|	< tMENOS: "-" >
|	< tPROD: "*" >
|	< tDIV: "/" >
|	< tAP: "(" >
|	< tCP: ")" >
}

SPECIAL_TOKEN : {
 	< tBASURA: ~[] >
	 	{
			System.err.println("Carácter extraño. Reemplazo por espacio");
			matchedToken.image = " ";
	 	}
}

//---------------------------------------------------------
//calc: (dec_constantes)? (dec_variables)? (instrucciones)+
void calc () : {}
{
	(dec_constantes())? (dec_variables())? (instrucciones())+
}

//dec_constantes: (dec_constante)+
void dec_constantes() : {}
{
	( dec_constante() )+
}

//dec_constante: < tCONST > < tASS > < tNUM > < tPC >
void dec_constante() : {}
{
	< tCONST > 
	< tID > 
	< tASS > 
	< tNUM > 
	< tPC >
}

//dec_variables: (dec_variable)+
void dec_variables() : {}
{
	( dec_variable() )+
}

//dec_variable:  < tVAR > < tID > < tPC >
void dec_variable() :
{

}
{
	< tVAR >
	< tID >
	< tPC >
}

//instrucciones: (instruccion)+
void instrucciones() :
{

}
{
	( instruccion() < tPC >)+ < EOF >
}

void instruccion() :
{

}
{
	inst_asignacion()
|	inst_escribir()
}

void inst_asignacion() :
{

}
{
	< tID >
	< tASS >
	expresion()
}

void inst_escribir() :
{

}
{
	< tWRITE >
	expresion()
}

void expresion() :
{ 
}
{ 	
	termino() 
	expresion_plus()
}

void expresion_plus() :
{ 

}
{ 	
	< tMAS > 
	termino() 
	expresion_plus()
|	< tMENOS >
	termino() 
	expresion_plus()
|	{
		//epsilon
	}
}

void termino() :
{ 

}
{
	factor()
	termino_plus()
}

void termino_plus() :
{ 

}
{ 	
	< tPROD > 
	factor()
	termino_plus()
|	< tDIV >
	factor()
	termino_plus()
|	{
		//epsilon
	}
}

void factor() :
{ 

}
{
	< tAP >
	expresion()
	< tCP >
|	< tID >
|	< tNUM >
|	< tMAS >
	factor()
|	< tMENOS >
	factor()
}
