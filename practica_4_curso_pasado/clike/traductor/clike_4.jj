//*****************************************************************
// File:   clike_4.jj
// Author: Procesadores de Lenguajes-University of Zaragoza
//         Pablo Cervera López (815538)
//         Diego Domingo Ralla (818637)
// Date:   Abril 2023
// Coms:   compilar mediante "ant"
//*****************************************************************

options {
 	IGNORE_CASE = false;
 	COMMON_TOKEN_ACTION = false;
 	// DEBUG_PARSER = true;
 	// ERROR_REPORTING = false;
}

PARSER_BEGIN(clike)

package traductor;

import java.util.ArrayList;
import java.io.FileWriter;
import java.io.File;
import java.io.IOException;

import lib.attributes.Attributes;
import lib.errores.ErrorSemantico;
import lib.symbolTable.*;
import lib.symbolTable.exceptions.*;
import lib.tools.SemanticFunctions;
import lib.tools.codeGeneration.*;

public class clike {

    static SymbolTable st;
    static ErrorSemantico errSem;
    static SemanticFunctions sf;

    public static void main(String[] args) {
    	clike parser = null;
        st = new SymbolTable();
        errSem = new ErrorSemantico();
        sf = new SemanticFunctions();
    	try {
	    	if (args.length == 0) {
				parser = new clike(System.in);
			}
			else {
	            parser = new clike(new java.io.FileInputStream(args[0]));
			}
			// Programa es el símbolo inicial de la gramática
			parser.Programa(args[1]);
            if (errSem.getContadorErrores() == 0) {
                System.out.println("Compilación finalizada. Se ha generado el fichero " + args[1]);
            }
		}
		catch (java.io.FileNotFoundException e) {
			System.err.println("Fichero " + args[0] + " no encontrado.");
		}
		catch (TokenMgrError e) {
        	System.err.println("LEX_ERROR: " + e.getMessage());
        }
		catch (ParseException e) {
			System.err.println("PARSER_ERROR: " + e.getMessage());
		}
    }
    
}

PARSER_END(clike)

SKIP : {
	" "
|	"\n"
|   "\t"
|   "\r"
|   < "//" (~["\r", "\n"])* >
}

TOKEN : {
 	< #LETTER: (["a"-"z","A"-"Z"]) >
|	< #DIGIT: ["0"-"9"] >
|   < #TOK: ~[] >
}

TOKEN : {
    < tBOOL: "bool" >
|	< tCHAR: "char" >
|	< tINT: "int" >
|	< tVOID: "void" >
|	< tIF: "if" >
|	< tWHILE: "while" >
|	< tELSE: "else" >
|   < tPRINT: "print" >
|   < tPRINTLN: "print_ln" >
|   < tREAD: "read" >
|   < tREADLN: "read_ln" >
|   < tRET: "return" >
|	< tPC: ";" >
|	< tC: "," >
|	< tAMP: "&" >
|	< tAP: "(" >
|	< tCP: ")" >
|   < tAC: "[" >
|   < tCC: "]" >
|	< tAL: "{" >
|	< tCL: "}" >
|	< tAS: "=" >
|   < tIG: "==" >
|   < tDIS: "!=" >
|   < tMAY: ">" >
|   < tMEN: "<" >
|   < tMAY_IG: ">=" >
|   < tMEN_IG: "<=" >
|   < tOR: "||" >
|   < tAND: "&&" >
|   < tNOT: "!" >
|   < tSUM: "+" >
|   < tRES: "-" >
|   < tMUL: "*" >
|   < tDIV: "/" >
|   < tMOD: "%" >
|   < tSTRING : "\"" (~["\""])* "\"" >
|   < tINT2CHAR: "int2char" >
|   < tCHAR2INT: "char2int" >
|   < tTRUE: "true" >
|   < tFALSE: "false" >
|   < tCONST_CHAR: "\'" <TOK> "\'" >
|	< tCONST_INT: (<DIGIT>)+ >
|   < tID: <LETTER>(<LETTER>|<DIGIT>|"_")* >
}

SPECIAL_TOKEN : {
    < tBASURA: ~[] >
        {
            System.out.println("ERROR LÉXICO: (" + matchedToken.beginLine +
            ", " + matchedToken.beginColumn + "): símbolo no reconocido: \"" +
            matchedToken.image + "\"");
        }
}

//------------ Símbolo inicial de la gramática
void Programa(String out) :
{
    Attributes at = new Attributes();
    CodeBlock programa;
} 
{
    { 
        String label = CGUtils.newLabel();
        programa = new CodeBlock(); 
        programa.addInst(PCodeInstruction.OpCode.ENP, label);
    }
	(declaracion(at))+
    { 
        programa.addBlock(at.code);
        programa.addInst(PCodeInstruction.OpCode.LVP);
        if (errSem.getContadorErrores() == 0) {
            File f = new File(out);
            try {
                FileWriter writer = new FileWriter(f);
                writer.write(programa.toString());
                writer.close();
            }
            catch (IOException e) {
                System.err.println("Error al abrir el archivo");
            }
        }
    }
	< EOF >
}

void declaracion(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
	LOOKAHEAD(3)
	declaracion_variables(at1) < tPC >
|   declaracion_func_proc(at1) 
    { at.code.addBlock(at1.code); }
}

void declaracion_variables(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    tipo(at1)
    { at2.type = at1.type; }
    lista_vars(at2)
}

void lista_vars(Attributes at) :
{
    Attributes at1 = new Attributes();
    at1.type = at.type; 
}
{
    variable(at1)
    (
        < tC >
        variable(at1)
    )*
}

void variable(Attributes at) :
{
    Token t1, t2;
}
{
    LOOKAHEAD(2)
    t1 = < tID >
    < tAC >
    t2 = < tCONST_INT >
    < tCC >
    { sf.variable_array(t1, t2, at, st); }
|   t1 = < tID >
    { sf.variable(t1, at, st); }
}

void declaracion_func_proc(Attributes at) :
{
    Token t;
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    tipo(at1)
    t = < tID >
    { Symbol s = sf.declaracion_func_proc(t, at, at1, at2, st); }
    resto_declaracion_func_proc(at2)
    {
        if (!t.image.contentEquals("main")) {
            st.removeBlock();
            if (at1.type == Symbol.Types.PROCEDURE) {
                ((SymbolProcedure) s).parList = at2.parList;
                ArrayList<Symbol> parametros = ((SymbolProcedure) s).parList;
                for (int i = parametros.size() - 1; i >= 0; i--) {
                    if (parametros.get(i).type == Symbol.Types.ARRAY && parametros.get(i).parClass == Symbol.ParameterClass.VAL) {
                        int maxInd = ((SymbolArray) parametros.get(i)).maxInd;
                        for (int j = maxInd; j >= 0; j--) {
                            at.code.addInst(PCodeInstruction.OpCode.SRF, 0, parametros.get(i).dir + j);
                            at.code.addInst(PCodeInstruction.OpCode.ASGI);
                        }
                    }
                    else {
                        at.code.addInst(PCodeInstruction.OpCode.SRF, 0, parametros.get(i).dir);
                        at.code.addInst(PCodeInstruction.OpCode.ASGI);
                    }
                }
            }
            else {
                ((SymbolFunction) s).parList = at2.parList;
                ArrayList<Symbol> parametros = ((SymbolFunction) s).parList;
                for (int i = parametros.size() - 1; i >= 0; i--) {
                    if (parametros.get(i).type == Symbol.Types.ARRAY && parametros.get(i).parClass == Symbol.ParameterClass.VAL) {
                        int maxInd = ((SymbolArray) parametros.get(i)).maxInd;
                        for (int j = maxInd; j >= 0; j--) {
                            at.code.addInst(PCodeInstruction.OpCode.SRF, 0, parametros.get(i).dir + j);
                            at.code.addInst(PCodeInstruction.OpCode.ASGI);
                        }
                    }
                    else {
                        at.code.addInst(PCodeInstruction.OpCode.SRF, 0, parametros.get(i).dir);
                        at.code.addInst(PCodeInstruction.OpCode.ASGI);
                    }
                }
            }
            at.code.addBlock(at2.code);
            at.code.addInst(PCodeInstruction.OpCode.CSF);
        }
        else {
            at.code.addLabel("L0");
            at.code.addBlock(at2.code);
        }
    }
}

void resto_declaracion_func_proc(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
    at1.parList = at.parList;
    at3.type = at.type;
    at3.name = at.name;
}
{
    < tAP >
    (lista_params(at1))?
    { at.parList = at1.parList; }
    < tCP >
    < tAL >
    (declaracion_variables(at2) < tPC >)*
    (
        instruccion(at3)
    )+
    { at.code.addBlock(at3.code); }
    < tCL >
}

void parametro(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
}
{
    tipo(at1)
    (referencia(at2))?
    { sf.parametro(at, at1, at2, at3); }
    variable(at3)
    { at.parList = at3.parList; }
}

void referencia(Attributes at) :
{

}
{
    < tAMP >
    { at.parClass = Symbol.ParameterClass.REF; }
}

void lista_params(Attributes at) :
{
    Attributes at1 = new Attributes();
    at1.parList = at.parList;
    at1.type = at.type;
    at1.name = at.name;
}
{
    parametro(at1)
    (
        < tC >
        parametro(at1)
    )*
    { at.parList = at1.parList; }
}

void instruccion(Attributes at) :
{
    Attributes at1 = new Attributes();
    at1.type = at.type;
    at1.name = at.name;
}
{
    inst_leer(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   inst_leer_linea(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   inst_escribir(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   inst_escribir_linea(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   LOOKAHEAD(2) inst_invoc_proc(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   inst_asignacion(at1) < tPC >
    { at.code.addBlock(at1.code); }
|   inst_seleccion(at1)
    { at.code.addBlock(at1.code); }
|   inst_iteracion(at1)
    { at.code.addBlock(at1.code); }
|   inst_return(at1) < tPC >
    { at.code.addBlock(at1.code); }
}

void inst_escribir(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    < tPRINT > 
    < tAP > 
    lista_una_o_mas_exps(at1) 
    {
        for (Attributes a : at1.lExps) {
            if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE) {
                errSem.deteccion("No se puede mostrar un " + a.type.name(), a);
            }
            else {
                if (a.type == Symbol.Types.CHAR) {
                    at.code.addBlock(a.code);
                    at.code.addInst(PCodeInstruction.OpCode.WRT, 0);
                }
                else if (a.type == Symbol.Types.STRING) {
                    for (int i = 0; i < a.name.length(); i++) {
                        at.code.addInst(PCodeInstruction.OpCode.STC, (int) a.name.charAt(i));
                        at.code.addInst(PCodeInstruction.OpCode.WRT, 0);
                    }
                }
                else {
                    at.code.addBlock(a.code);
                    at.code.addInst(PCodeInstruction.OpCode.WRT, 1);
                }
            }
        }
    }
    < tCP >
}

void inst_escribir_linea(Attributes at) :
{
    
}
{
    < tPRINTLN >
    < tAP >
    lista_cero_o_mas_exps(at)
    {
        for (Attributes a : at.lExps) {
            if (a.type == Symbol.Types.ARRAY || a.type == Symbol.Types.PROCEDURE) {
                errSem.deteccion("No se puede mostrar un " + a.type.name(), a);
            }
            else {
                if (a.type == Symbol.Types.CHAR) {
                    at.code.addBlock(a.code);
                    at.code.addInst(PCodeInstruction.OpCode.WRT, 0);
                }
                else if (a.type == Symbol.Types.STRING) {
                    for (int i = 0; i < a.name.length(); i++) {
                        at.code.addInst(PCodeInstruction.OpCode.STC, (int) a.name.charAt(i));
                        at.code.addInst(PCodeInstruction.OpCode.WRT, 0);
                    }
                }
                else {
                    at.code.addBlock(a.code);
                    at.code.addInst(PCodeInstruction.OpCode.WRT, 1);
                }
            }
        }
        at.code.addInst(PCodeInstruction.OpCode.STC, 10);
        at.code.addInst(PCodeInstruction.OpCode.WRT, 0);
    }
    < tCP >
}

void inst_leer(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    < tREAD > 
    < tAP > 
    lista_uno_o_mas_asignables(at1) 
    { at.code.addBlock(at1.code); }
    < tCP > 
}

void inst_leer_linea(Attributes at) :
{
    
}
{
    < tREADLN > 
    < tAP > 
    lista_cero_o_mas_asignables(at)
    < tCP >
}

void inst_asignacion(Attributes at) :
{
    Token t;
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    asignable(at1)
    { at.code.addBlock(at1.code); }
    t = < tAS > 
    expresion(at2)
    {
        sf.inst_asignacion(t, at, at1, at2, st);
        at.code.addBlock(at2.code);
        at.code.addInst(PCodeInstruction.OpCode.ASG);
    }
}

void expresion(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    relacion(at1)
    { 
        sf.expresion(at, at1, at2);
        at.code.addBlock(at1.code);
    }
    (
        mas_relacion(at2)
        { at.code.addBlock(at2.code); }
    )?
}

void mas_relacion(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    (
        and_or(at1) 
        relacion(at2)
        {
            if (at.type != at2.type) {
                errSem.deteccion("Tipos incompatibles en expresión: " + at.type.name() + "/" + at2.type.name(), at2);
            }
            if (at2.type != Symbol.Types.BOOL) {
                errSem.deteccion("Tipos imcompatibles en expresión: BOOL/" + at2.type.name(), at2);
            }
            at.code.addBlock(at2.code);
            at.code.addBlock(at1.code);
        }
    )+
}

void and_or(Attributes at) :
{

}
{
    < tOR >
    { at.code.addInst(PCodeInstruction.OpCode.OR); }
|   < tAND >
    { at.code.addInst(PCodeInstruction.OpCode.AND); }
}

// relacion: expresion_simple (operador_relacional expresion_simple)?
void relacion(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
}
{
    expresion_simple(at1)
    { 
        sf.relacion1(at, at1, at2);
        at.code.addBlock(at1.code);
    }
    (
        operador_relacional(at2)
        expresion_simple(at3)
        { 
            sf.relacion2(at, at1, at2, at3);
            at.code.addBlock(at3.code);
            at.code.addBlock(at2.code);
        }
    )?
}

void operador_relacional(Attributes at) :
{

}
{
    < tIG > 
    { at.code.addInst(PCodeInstruction.OpCode.EQ); }
|   < tMEN >
    { at.code.addInst(PCodeInstruction.OpCode.LT); }
|   < tMAY >
    { at.code.addInst(PCodeInstruction.OpCode.GT); }
|   < tMEN_IG >
    { at.code.addInst(PCodeInstruction.OpCode.LTE); }
|   < tMAY_IG >
    { at.code.addInst(PCodeInstruction.OpCode.GTE); }
|   < tDIS >
    { at.code.addInst(PCodeInstruction.OpCode.NEQ); }
}

void expresion_simple(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
    Attributes at4 = new Attributes();
}
{
    (op_MAS_MENOS(at1))?
    termino(at2)
    { 
        sf.expresion_simple1(at, at1, at2);
        at.code.addBlock(at2.code);
        if (at1.name != null && at1.name.contentEquals("-")) {
            at.code.addInst(PCodeInstruction.OpCode.NGI);
        }
    }
    (
        op_MAS_MENOS(at3)
        termino(at4)
        { 
            sf.expresion_simple2(at, at2, at4);
            at.code.addBlock(at4.code);
            at.code.addBlock(at3.code);
            at4.code.clearBlock();
            at3.code.clearBlock();
        }
    )*
}

void op_MAS_MENOS(Attributes at) :
{
    Token t;
}
{
    t = < tSUM >
    {
        at.name = t.image;
        at.type = Symbol.Types.INT;
        at.code.addInst(PCodeInstruction.OpCode.PLUS);
    }
|   t = < tRES >
    { 
        at.name = t.image;
        at.type = Symbol.Types.INT;
        at.code.addInst(PCodeInstruction.OpCode.SBT);
    }
}

void termino(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
}
{
    factor(at1)
    { 
        sf.termino1(at, at1);
        at.code.addBlock(at1.code); 
    }
    (
        op_MULT(at2)
        factor(at3)
        { 
            sf.termino2(at, at1, at3);
            at.code.addBlock(at3.code);
            at.code.addBlock(at2.code);
            at3.code.clearBlock();
            at2.code.clearBlock();
        }
    )*
}

void op_MULT(Attributes at) :
{

}
{
    < tMUL >
    { at.code.addInst(PCodeInstruction.OpCode.TMS); }
|   < tDIV >
    { at.code.addInst(PCodeInstruction.OpCode.DIV); }
|   < tMOD >
    { at.code.addInst(PCodeInstruction.OpCode.MOD); }
}

void factor(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    primario(at1)
    { 
        sf.factor1(at, at1);
        at.code.addBlock(at1.code);
    }
|   < tNOT >
    primario(at1)
    { 
        sf.factor2(at, at1);
        at.code.addBlock(at1.code);
        at.code.addInst(PCodeInstruction.OpCode.NGB);
    }
}

void primario(Attributes at) :
{
    Token t;
    Attributes at1 = new Attributes();
}
{
    < tAP > expresion(at1) < tCP >
    { 
        sf.primario(at, at1);
        at.code.addBlock(at1.code);
    }
|   < tINT2CHAR > < tAP > expresion(at1) < tCP >
    { 
        sf.int2char(at, at1);
        at.code.addBlock(at1.code);
    }
|   < tCHAR2INT > < tAP > expresion(at1) < tCP >
    {
        sf.char2int(at, at1); 
        at.code.addBlock(at1.code);
    }
|   LOOKAHEAD(2) t = < tID > < tAP > lista_cero_o_mas_exps(at) < tCP >
    { sf.invoc_func(t, at, st); }
|   LOOKAHEAD(2) t = < tID > < tAC > expresion(at1) < tCC >
    { sf.comp_vector(t, at, at1, st); }
|   t = < tID >
    { sf.identificador(t, at, st); }
|   t = < tCONST_INT >
    { 
        sf.const_int(at, t); 
        at.code.addInst(PCodeInstruction.OpCode.STC, at.valInt);
    }
|   t = < tCONST_CHAR >
    { 
        sf.const_char(at, t);
        at.code.addInst(PCodeInstruction.OpCode.STC, (int) at.valChar);
    }
|   t = < tSTRING >
    { sf.string(at, t); }
|   t = < tTRUE >
    { 
        sf.const_bool_true(t, at); 
        at.code.addInst(PCodeInstruction.OpCode.STC, 1);
    }
|   t = < tFALSE >
    {
        sf.const_bool_true(t, at);
        at.code.addInst(PCodeInstruction.OpCode.STC, 0);
    }
}

void asignable(Attributes at) :
{
    Token t;
    Attributes at1 = new Attributes();
}
{
    LOOKAHEAD(2) t = < tID > < tAC > expresion(at1) < tCC >
    { sf.asignable_comp_vector(t, at, at1, st); }
|   t = < tID >
    { sf.asignable(t, at, st); }
}

void tipo(Attributes at) :
{

}
{
    < tINT >
    { at.type = Symbol.Types.INT; }
|   < tCHAR >
    { at.type = Symbol.Types.CHAR; }
|   < tBOOL >
    { at.type = Symbol.Types.BOOL; }
|   < tVOID >
    { at.type = Symbol.Types.PROCEDURE; }
}

void inst_invoc_proc(Attributes at) :
{
    Token t;
}
{
    t = < tID > 
    < tAP > 
    lista_cero_o_mas_exps(at)
    < tCP >
    { 
        sf.inst_invoc_proc(t, at, st); 
    }
}

void inst_seleccion(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    Attributes at3 = new Attributes();
    at2.type = at.type;
    at2.name = at.name;
    at3.type = at.type;
    at3.name = at.name;
    String label1, label2;
}
{
    < tIF >
    < tAP >
    expresion(at1) 
    {
        if (at1.type != Symbol.Types.BOOL && at1.type != Symbol.Types.UNDEFINED) {
            errSem.deteccion("La condición de un 'if' debe ser tipo 'boolean'", at1);
        }
        at.code.addBlock(at1.code);
        label1 = CGUtils.newLabel();
        at.code.addInst(PCodeInstruction.OpCode.JMF, label1);
    }
    < tCP >
    < tAL > 
    (instruccion(at2))* 
    { at.code.addBlock(at2.code); }
    < tCL >
    {
        label2 = CGUtils.newLabel();
        at.code.addInst(PCodeInstruction.OpCode.JMP, label2);
        at.code.addLabel(label1); 
    }
    (
        bloque_else(at3)
        { 
            at.code.addBlock(at3.code);
        }
    )?
    { at.code.addLabel(label2); }
}

void bloque_else(Attributes at) :
{
    Attributes at1 = new Attributes();
    at1.type = at.type;
    at1.name = at.name;
}
{
    < tELSE > 
    < tAL > 
    (instruccion(at1))*
    { at.code.addBlock(at1.code); }
    < tCL >
}

void inst_iteracion(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
    at2.type = at.type;
    at2.name = at.name;
    String label1;
    String label2;
}
{
    { 
        label1 = CGUtils.newLabel();
        at.code.addLabel(label1);
    }
    < tWHILE > 
    < tAP >
    expresion(at1) 
    {
        if (at1.type != Symbol.Types.BOOL && at1.type != Symbol.Types.UNDEFINED) {
            errSem.deteccion("La condición de un 'while' debe ser de tipo 'boolean'", at1);
        }
        at.code.addBlock(at1.code);
        label2 = CGUtils.newLabel();
        at.code.addInst(PCodeInstruction.OpCode.JMF, label2);
    }
    < tCP >
    < tAL > 
    (instruccion(at2))*
    { 
        at.code.addBlock(at2.code);
        at.code.addInst(PCodeInstruction.OpCode.JMP, label1);
        at.code.addLabel(label2);
    }
    < tCL >
}

void inst_return(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    < tRET > expresion(at1)
    {
        if (at.type != at1.type && at1.type != Symbol.Types.UNDEFINED) {
            errSem.deteccion("Instrucción return de la función " + at.name + " con tipo de dato incompatible: " + at.type.name() + "/" + at1.type.name(), at1);
        }
        at.code.addBlock(at1.code);
        at.code.addInst(PCodeInstruction.OpCode.CSF);
    }
}

void lista_cero_o_mas_exps(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    (lista_una_o_mas_exps(at1))?
    { at.lExps = at1.lExps; }
}

void lista_una_o_mas_exps(Attributes at) :
{
    Attributes at1 = new Attributes();
}
{
    expresion(at1)
    { 
        at.lExps.add(at1); 
        at.code.addBlock(at1.code);
    }
    (
        < tC >
        { Attributes at2 = new Attributes(); }
        expresion(at2)
        { 
            at.lExps.add(at2); 
            at.code.addBlock(at2.code);
        }
    )*
}

void lista_cero_o_mas_asignables(Attributes at) :
{
    Attributes at1 = new Attributes();
    String label;
}
{
    (
        lista_uno_o_mas_asignables(at1)
        {
            for (Attributes a : at1.lExps) {
                at.code.addBlock(a.code); 
            }
        }
    )?
    { 
        sf.lista_cero_o_mas_asignables(at, at1);
        label = CGUtils.newLabel();
        at.code.addLabel(label);
        CGUtils.memorySpaces[st.level]++;
        at.code.addInst(PCodeInstruction.OpCode.SRF, 0, CGUtils.memorySpaces[st.level] + 2);
        at.code.addInst(PCodeInstruction.OpCode.RD, 0);
        at.code.addInst(PCodeInstruction.OpCode.STC, 10);
        at.code.addInst(PCodeInstruction.OpCode.SRF, 0, CGUtils.memorySpaces[st.level] + 2);
        at.code.addInst(PCodeInstruction.OpCode.DRF);
        at.code.addInst(PCodeInstruction.OpCode.EQ);
        at.code.addInst(PCodeInstruction.OpCode.JMF, label);
    }
}

void lista_uno_o_mas_asignables(Attributes at) :
{
    Attributes at1 = new Attributes();
    Attributes at2 = new Attributes();
}
{
    asignable(at1)
    { 
        sf.lista_uno_o_mas_asignables(at, at1);
        if (at1.type == Symbol.Types.CHAR) {
            at1.code.addInst(PCodeInstruction.OpCode.RD, 0);
        }
        else {
            at1.code.addInst(PCodeInstruction.OpCode.RD, 1);
        }
        at.lExps.add(at1);
        at.code.addBlock(at1.code);
    }
    (
        < tC >
        asignable(at2) 
        {
            sf.lista_uno_o_mas_asignables(at, at2);
            if (at2.type == Symbol.Types.CHAR) {
                at2.code.addInst(PCodeInstruction.OpCode.RD, 0);
            }
            else {
                at2.code.addInst(PCodeInstruction.OpCode.RD, 1);
            }
            at.lExps.add(at2);
            at.code.addBlock(at1.code);
        }
    )*
}
