<?xml version="1.0" encoding="UTF-8"?>
<eratostenes>
; --- Program "eratostenes"
  ENP L0
<constant_variable_declaration>
; --- Simple variable "n", type INT, level 0,  address [3]!
; --- Array variable "criba", type BOOL, size 101, level 0, address [4:104]!
</constant_variable_declaration>
<function_pedir_entero>
L1:
  JMP L2
<constant_variable_declaration>
; --- Simple variable "n", type INT, level 1,  address [4]!
</constant_variable_declaration>
L2:
<pedir_entero_instruction_block>
<mark_runtime_return_execution_false>
  SRF  0  3
  STC  0
  ASG 
</mark_runtime_return_execution_false>
<Assignment_to_simple_variable_n>
; --- Address of variable / parameter "n"
  SRF  0  4
  STC  0
  ASG 
</Assignment_to_simple_variable_n>
<while>
L3:
<condition>
; --- Constant / variable / parameter "n"
  SRF  0  4
  DRF 
  STC  1
  LT 
; --- Constant / variable / parameter "n"
  SRF  0  4
  DRF 
  STC 100
  GT 
  OR 
</condition>
  JMF L4
<while_instruction_block>
<put>
; --- Write STRING "Dame un numero entre 1 y 100: "
; --- Standard string writing
  STC 68
  WRT  0
  STC 97
  WRT  0
  STC 109
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 110
  WRT  0
  STC 117
  WRT  0
  STC 109
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 111
  WRT  0
  STC 32
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 114
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 49
  WRT  0
  STC 32
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 49
  WRT  0
  STC 48
  WRT  0
  STC 48
  WRT  0
  STC 58
  WRT  0
  STC 32
  WRT  0
</put>
<get>
; --- Get simple variable/parameter "n".
  SRF  0  4
  RD  1
</get>
</while_instruction_block>
  JMP L3
L4:
</while>
<return>
<mark_runtime_return_execution_true>
  SRF  0  3
  STC  1
  ASG 
</mark_runtime_return_execution_true>
; --- Constant / variable / parameter "n"
  SRF  0  4
  DRF 
  CSF 
</return>
<check_runtime_return_execution>
  SRF  0  3
  DRF 
  JMT L5
; --- Write STRING "Function "pedir_entero" does not return a value in line 19."
; --- Standard string writing
  STC 70
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 99
  WRT  0
  STC 116
  WRT  0
  STC 105
  WRT  0
  STC 111
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 112
  WRT  0
  STC 101
  WRT  0
  STC 100
  WRT  0
  STC 105
  WRT  0
  STC 114
  WRT  0
  STC 95
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 111
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 111
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 110
  WRT  0
  STC 111
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 114
  WRT  0
  STC 101
  WRT  0
  STC 116
  WRT  0
  STC 117
  WRT  0
  STC 114
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
  STC 118
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 117
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 49
  WRT  0
  STC 57
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L5:
</check_runtime_return_execution>
  CSF 
</pedir_entero_instruction_block>
</function_pedir_entero>
<procedure_escrib_vect>
L6:
; --- Val array parameter "v", type BOOL, class VAL, size 101, level 1, address [3:103]!
<recover_argument_1>
; --- Recover array val variable parameter "v" (number 1).
  SRF  0 103
  ASGI 
  SRF  0 102
  ASGI 
  SRF  0 101
  ASGI 
  SRF  0 100
  ASGI 
  SRF  0 99
  ASGI 
  SRF  0 98
  ASGI 
  SRF  0 97
  ASGI 
  SRF  0 96
  ASGI 
  SRF  0 95
  ASGI 
  SRF  0 94
  ASGI 
  SRF  0 93
  ASGI 
  SRF  0 92
  ASGI 
  SRF  0 91
  ASGI 
  SRF  0 90
  ASGI 
  SRF  0 89
  ASGI 
  SRF  0 88
  ASGI 
  SRF  0 87
  ASGI 
  SRF  0 86
  ASGI 
  SRF  0 85
  ASGI 
  SRF  0 84
  ASGI 
  SRF  0 83
  ASGI 
  SRF  0 82
  ASGI 
  SRF  0 81
  ASGI 
  SRF  0 80
  ASGI 
  SRF  0 79
  ASGI 
  SRF  0 78
  ASGI 
  SRF  0 77
  ASGI 
  SRF  0 76
  ASGI 
  SRF  0 75
  ASGI 
  SRF  0 74
  ASGI 
  SRF  0 73
  ASGI 
  SRF  0 72
  ASGI 
  SRF  0 71
  ASGI 
  SRF  0 70
  ASGI 
  SRF  0 69
  ASGI 
  SRF  0 68
  ASGI 
  SRF  0 67
  ASGI 
  SRF  0 66
  ASGI 
  SRF  0 65
  ASGI 
  SRF  0 64
  ASGI 
  SRF  0 63
  ASGI 
  SRF  0 62
  ASGI 
  SRF  0 61
  ASGI 
  SRF  0 60
  ASGI 
  SRF  0 59
  ASGI 
  SRF  0 58
  ASGI 
  SRF  0 57
  ASGI 
  SRF  0 56
  ASGI 
  SRF  0 55
  ASGI 
  SRF  0 54
  ASGI 
  SRF  0 53
  ASGI 
  SRF  0 52
  ASGI 
  SRF  0 51
  ASGI 
  SRF  0 50
  ASGI 
  SRF  0 49
  ASGI 
  SRF  0 48
  ASGI 
  SRF  0 47
  ASGI 
  SRF  0 46
  ASGI 
  SRF  0 45
  ASGI 
  SRF  0 44
  ASGI 
  SRF  0 43
  ASGI 
  SRF  0 42
  ASGI 
  SRF  0 41
  ASGI 
  SRF  0 40
  ASGI 
  SRF  0 39
  ASGI 
  SRF  0 38
  ASGI 
  SRF  0 37
  ASGI 
  SRF  0 36
  ASGI 
  SRF  0 35
  ASGI 
  SRF  0 34
  ASGI 
  SRF  0 33
  ASGI 
  SRF  0 32
  ASGI 
  SRF  0 31
  ASGI 
  SRF  0 30
  ASGI 
  SRF  0 29
  ASGI 
  SRF  0 28
  ASGI 
  SRF  0 27
  ASGI 
  SRF  0 26
  ASGI 
  SRF  0 25
  ASGI 
  SRF  0 24
  ASGI 
  SRF  0 23
  ASGI 
  SRF  0 22
  ASGI 
  SRF  0 21
  ASGI 
  SRF  0 20
  ASGI 
  SRF  0 19
  ASGI 
  SRF  0 18
  ASGI 
  SRF  0 17
  ASGI 
  SRF  0 16
  ASGI 
  SRF  0 15
  ASGI 
  SRF  0 14
  ASGI 
  SRF  0 13
  ASGI 
  SRF  0 12
  ASGI 
  SRF  0 11
  ASGI 
  SRF  0 10
  ASGI 
  SRF  0  9
  ASGI 
  SRF  0  8
  ASGI 
  SRF  0  7
  ASGI 
  SRF  0  6
  ASGI 
  SRF  0  5
  ASGI 
  SRF  0  4
  ASGI 
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L7
<constant_variable_declaration>
; --- Simple variable "m", type INT, level 1,  address [104]!
; --- Simple variable "i", type INT, level 1,  address [105]!
; --- Simple variable "salir", type BOOL, level 1,  address [106]!
</constant_variable_declaration>
L7:
<escrib_vect_instruction_block>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 105
  STC  2
  ASG 
</Assignment_to_simple_variable_i>
<Assignment_to_simple_variable_m>
; --- Address of variable / parameter "m"
  SRF  0 104
  STC  0
  ASG 
</Assignment_to_simple_variable_m>
<Assignment_to_simple_variable_salir>
; --- Address of variable / parameter "salir"
  SRF  0 106
  STC  0
  ASG 
</Assignment_to_simple_variable_salir>
<put>
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Write STRING "Numeros primos hasta "
; --- Standard string writing
  STC 78
  WRT  0
  STC 117
  WRT  0
  STC 109
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 112
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 109
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 104
  WRT  0
  STC 97
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Write STRING ": "
; --- Standard string writing
  STC 58
  WRT  0
  STC 32
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<while>
L8:
<condition>
; --- Constant / variable / parameter "salir"
  SRF  0 106
  DRF 
  NGB 
</condition>
  JMF L9
<while_instruction_block>
<if-then>
<condition>
; --- Constant / variable / parameter "i"
  SRF  0 105
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  GT 
</condition>
  JMF L10
<then>
<Assignment_to_simple_variable_salir>
; --- Address of variable / parameter "salir"
  SRF  0 106
  STC  1
  ASG 
</Assignment_to_simple_variable_salir>
  JMP L11
</then>
<else>
L10:
<if-then>
<condition>
<component_of_array_v>
; --- Constant / variable / parameter "i"
  SRF  0 105
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "v"
  DUP 
  STC  0
  GTE 
  JMF L12
  DUP 
  STC 101
  LT 
  JMT L13
L12:
; --- Write STRING "Index out of bounds for array "v" in line 35."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 118
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 51
  WRT  0
  STC 53
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L13:
; --- Initial address of array "v"
  SRF  0  3
  PLUS 
  DRF 
</component_of_array_v>
</condition>
  JMF L14
<then>
<put>
; --- Constant / variable / parameter "i"
  SRF  0 105
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Write STRING " es primo."
; --- Standard string writing
  STC 32
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 112
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 109
  WRT  0
  STC 111
  WRT  0
  STC 46
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<Assignment_to_simple_variable_m>
; --- Address of variable / parameter "m"
  SRF  0 104
; --- Constant / variable / parameter "m"
  SRF  0 104
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_m>
</then>
L14:
</if-then>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 105
; --- Constant / variable / parameter "i"
  SRF  0 105
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_i>
</else>
L11:
</if-then>
</while_instruction_block>
  JMP L8
L9:
</while>
<put>
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Write STRING "Hasta "
; --- Standard string writing
  STC 72
  WRT  0
  STC 97
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Write STRING " hay "
; --- Standard string writing
  STC 32
  WRT  0
  STC 104
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Constant / variable / parameter "m"
  SRF  0 104
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Write STRING " números primos."
; --- Standard string writing
  STC 32
  WRT  0
  STC 110
  WRT  0
  STC -61
  WRT  0
  STC -70
  WRT  0
  STC 109
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 112
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 109
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 46
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
  CSF 
</escrib_vect_instruction_block>
</procedure_escrib_vect>
<procedure_inicializar>
L15:
; --- Ref array parameter "v", type BOOL, class REF, size 101, level 1, address [3]!
<recover_argument_1>
; --- Recover array ref variable parameter "v" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L16
<constant_variable_declaration>
; --- Simple variable "i", type INT, level 1,  address [4]!
</constant_variable_declaration>
L16:
<inicializar_instruction_block>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
  STC  1
  ASG 
</Assignment_to_simple_variable_i>
<while>
L17:
<condition>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  LTE 
</condition>
  JMF L18
<while_instruction_block>
<Assignment_to_component_of_array_v>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "v"
  DUP 
  STC  0
  GTE 
  JMF L19
  DUP 
  STC 101
  LT 
  JMT L20
L19:
; --- Write STRING "Index out of bounds for array "v" in line 50."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 118
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 53
  WRT  0
  STC 48
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L20:
; --- Initial address of array "v"
  SRF  0  3
  DRF 
  PLUS 
  STC  1
  ASG 
</Assignment_to_component_of_array_v>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_i>
</while_instruction_block>
  JMP L17
L18:
</while>
  CSF 
</inicializar_instruction_block>
</procedure_inicializar>
<procedure_eliminar_no_primos>
L21:
; --- Ref array parameter "v", type BOOL, class REF, size 101, level 1, address [3]!
<recover_argument_1>
; --- Recover array ref variable parameter "v" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L22
<constant_variable_declaration>
; --- Simple variable "i", type INT, level 1,  address [4]!
; --- Simple variable "j", type INT, level 1,  address [5]!
</constant_variable_declaration>
L22:
<eliminar_no_primos_instruction_block>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
  STC  2
  ASG 
</Assignment_to_simple_variable_i>
<while>
L23:
<condition>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  STC  2
  DIV 
  LTE 
</condition>
  JMF L24
<while_instruction_block>
<if-then>
<condition>
<component_of_array_v>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "v"
  DUP 
  STC  0
  GTE 
  JMF L25
  DUP 
  STC 101
  LT 
  JMT L26
L25:
; --- Write STRING "Index out of bounds for array "v" in line 60."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 118
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 48
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L26:
; --- Initial ref address of array "v"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_v>
</condition>
  JMF L27
<then>
<Assignment_to_simple_variable_j>
; --- Address of variable / parameter "j"
  SRF  0  5
  STC  2
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  TMS 
  ASG 
</Assignment_to_simple_variable_j>
<while>
L28:
<condition>
; --- Constant / variable / parameter "j"
  SRF  0  5
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  LTE 
</condition>
  JMF L29
<while_instruction_block>
<Assignment_to_component_of_array_v>
; --- Constant / variable / parameter "j"
  SRF  0  5
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "v"
  DUP 
  STC  0
  GTE 
  JMF L30
  DUP 
  STC 101
  LT 
  JMT L31
L30:
; --- Write STRING "Index out of bounds for array "v" in line 63."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 118
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 51
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L31:
; --- Initial address of array "v"
  SRF  0  3
  DRF 
  PLUS 
  STC  0
  ASG 
</Assignment_to_component_of_array_v>
<Assignment_to_simple_variable_j>
; --- Address of variable / parameter "j"
  SRF  0  5
; --- Constant / variable / parameter "j"
  SRF  0  5
  DRF 
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  PLUS 
  ASG 
</Assignment_to_simple_variable_j>
</while_instruction_block>
  JMP L28
L29:
</while>
</then>
L27:
</if-then>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_i>
</while_instruction_block>
  JMP L23
L24:
</while>
  CSF 
</eliminar_no_primos_instruction_block>
</procedure_eliminar_no_primos>
<procedure_procesar>
L32:
; --- Ref array parameter "v", type BOOL, class REF, size 101, level 1, address [3]!
<recover_argument_1>
; --- Recover array ref variable parameter "v" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L33
<constant_variable_declaration>
</constant_variable_declaration>
L33:
<procesar_instruction_block>
<procedure_call_inicializar>
; --- Procedure call inicializar
<argument_1>
; --- Constant / variable / parameter "v"
  SRF  0  3
  DRF 
</argument_1>
  OSF  4  1 L15
</procedure_call_inicializar>
<procedure_call_eliminar_no_primos>
; --- Procedure call eliminar_no_primos
<argument_1>
; --- Constant / variable / parameter "v"
  SRF  0  3
  DRF 
</argument_1>
  OSF  4  1 L21
</procedure_call_eliminar_no_primos>
<procedure_call_escrib_vect>
; --- Procedure call escrib_vect
<argument_1>
; --- Constant / variable / parameter "v"
  SRF  0  3
  DRF 
  STC  0
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  1
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  2
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  3
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  4
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  5
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  6
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  7
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  8
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  9
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 10
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 11
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 12
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 13
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 14
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 15
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 16
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 17
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 18
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 19
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 20
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 21
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 22
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 23
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 24
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 25
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 26
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 27
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 28
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 29
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 30
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 31
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 32
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 33
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 34
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 35
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 36
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 37
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 38
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 39
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 40
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 41
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 42
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 43
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 44
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 45
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 46
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 47
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 48
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 49
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 50
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 51
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 52
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 53
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 54
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 55
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 56
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 57
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 58
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 59
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 60
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 61
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 62
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 63
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 64
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 65
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 66
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 67
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 68
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 69
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 70
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 71
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 72
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 73
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 74
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 75
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 76
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 77
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 78
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 79
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 80
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 81
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 82
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 83
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 84
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 85
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 86
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 87
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 88
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 89
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 90
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 91
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 92
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 93
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 94
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 95
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 96
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 97
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 98
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 99
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 100
  PLUS 
  DRF 
</argument_1>
  OSF  4  1 L6
</procedure_call_escrib_vect>
  CSF 
</procesar_instruction_block>
</procedure_procesar>
L0:
<eratostenes_instruction_block>
<put>
; --- Write STRING "Criba de Eratóstenes: primos hasta un n dado"
; --- Standard string writing
  STC 67
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 98
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 69
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 116
  WRT  0
  STC -61
  WRT  0
  STC -77
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
  STC 58
  WRT  0
  STC 32
  WRT  0
  STC 112
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 109
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 104
  WRT  0
  STC 97
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 97
  WRT  0
  STC 100
  WRT  0
  STC 111
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Write STRING "https://es.wikipedia.org/wiki/Criba_de_Erat%C3%B3stenes"
; --- Standard string writing
  STC 104
  WRT  0
  STC 116
  WRT  0
  STC 116
  WRT  0
  STC 112
  WRT  0
  STC 115
  WRT  0
  STC 58
  WRT  0
  STC 47
  WRT  0
  STC 47
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
  STC 46
  WRT  0
  STC 119
  WRT  0
  STC 105
  WRT  0
  STC 107
  WRT  0
  STC 105
  WRT  0
  STC 112
  WRT  0
  STC 101
  WRT  0
  STC 100
  WRT  0
  STC 105
  WRT  0
  STC 97
  WRT  0
  STC 46
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 103
  WRT  0
  STC 47
  WRT  0
  STC 119
  WRT  0
  STC 105
  WRT  0
  STC 107
  WRT  0
  STC 105
  WRT  0
  STC 47
  WRT  0
  STC 67
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 98
  WRT  0
  STC 97
  WRT  0
  STC 95
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 95
  WRT  0
  STC 69
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 116
  WRT  0
  STC 37
  WRT  0
  STC 67
  WRT  0
  STC 51
  WRT  0
  STC 37
  WRT  0
  STC 66
  WRT  0
  STC 51
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<Assignment_to_simple_variable_n>
; --- Address of variable / parameter "n"
  SRF  0  3
<function_call_pedir_entero>
; --- Function call pedir_entero
  OSF 105  0 L1
</function_call_pedir_entero>
  ASG 
</Assignment_to_simple_variable_n>
<procedure_call_procesar>
; --- Procedure call procesar
<argument_1>
; --- Constant / variable / parameter "criba"
  SRF  0  4
</argument_1>
  OSF 105  0 L32
</procedure_call_procesar>
</eratostenes_instruction_block>
  LVP 
</eratostenes>
