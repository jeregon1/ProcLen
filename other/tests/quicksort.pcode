<?xml version="1.0" encoding="UTF-8"?>
<qsort>
; --- Program "qsort"
  ENP L0
<constant_variable_declaration>
; --- Simple variable "n", type INT, level 0,  address [3]!
; --- Simple variable "iteraciones", type INT, level 0,  address [4]!
; --- Array variable "t", type INT, size 20, level 0, address [5:24]!
</constant_variable_declaration>
<procedure_inicializar>
L1:
; --- Ref array parameter "t", type INT, class REF, size 20, level 1, address [3]!
<recover_argument_1>
; --- Recover array ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L2
<constant_variable_declaration>
; --- Simple variable "i", type INT, level 1,  address [4]!
</constant_variable_declaration>
L2:
<inicializar_instruction_block>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
  STC  0
  ASG 
</Assignment_to_simple_variable_i>
<while>
L3:
<condition>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  LT 
</condition>
  JMF L4
<while_instruction_block>
<Assignment_to_component_of_array_t>
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L5
  DUP 
  STC 20
  LT 
  JMT L6
L5:
; --- Write STRING "Index out of bounds for array "t" in line 16."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 49
  WRT  0
  STC 54
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L6:
; --- Initial address of array "t"
  SRF  0  3
  DRF 
  PLUS 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  SBT 
  ASG 
</Assignment_to_component_of_array_t>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  4
; --- Constant / variable / parameter "i"
  SRF  0  4
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_i>
</while_instruction_block>
  JMP L3
L4:
</while>
  CSF 
</inicializar_instruction_block>
</procedure_inicializar>
<procedure_mostrar>
L7:
; --- Val array parameter "t", type INT, class VAL, size 20, level 1, address [3:22]!
<recover_argument_1>
; --- Recover array val variable parameter "t" (number 1).
  SRF  0 22
  ASGI 
  SRF  0 21
  ASGI 
  SRF  0 20
  ASGI 
  SRF  0 19
  ASGI 
  SRF  0 18
  ASGI 
  SRF  0 17
  ASGI 
  SRF  0 16
  ASGI 
  SRF  0 15
  ASGI 
  SRF  0 14
  ASGI 
  SRF  0 13
  ASGI 
  SRF  0 12
  ASGI 
  SRF  0 11
  ASGI 
  SRF  0 10
  ASGI 
  SRF  0  9
  ASGI 
  SRF  0  8
  ASGI 
  SRF  0  7
  ASGI 
  SRF  0  6
  ASGI 
  SRF  0  5
  ASGI 
  SRF  0  4
  ASGI 
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L8
<constant_variable_declaration>
; --- Simple variable "i", type INT, level 1,  address [23]!
</constant_variable_declaration>
L8:
<mostrar_instruction_block>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 23
  STC  0
  ASG 
</Assignment_to_simple_variable_i>
<while>
L9:
<condition>
; --- Constant / variable / parameter "i"
  SRF  0 23
  DRF 
; --- Constant / variable / parameter "n"
  SRF  1  3
  DRF 
  LT 
</condition>
  JMF L10
<while_instruction_block>
<put>
<component_of_array_t>
; --- Constant / variable / parameter "i"
  SRF  0 23
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L11
  DUP 
  STC 20
  LT 
  JMT L12
L11:
; --- Write STRING "Index out of bounds for array "t" in line 25."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 50
  WRT  0
  STC 53
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L12:
; --- Initial address of array "t"
  SRF  0  3
  PLUS 
  DRF 
</component_of_array_t>
; --- Put INTEGER
  WRT  1
</put>
<put>
; --- Write STRING " "
; --- Standard string writing
  STC 32
  WRT  0
</put>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0 23
; --- Constant / variable / parameter "i"
  SRF  0 23
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_i>
</while_instruction_block>
  JMP L9
L10:
</while>
<put>
<int2char>
  STC 13
  STC 13
; --- check 0 <= int <= 255
  DUP 
  STC  0
  GTE 
  JMF L13
  STC 255
  LTE 
  JMF L13
  JMP L14
L13:
; --- Write STRING "Value "
; --- Standard string writing
  STC 86
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 117
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  WRT  1
; --- Write STRING " invalid for int2char in line 28."
; --- Standard string writing
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 118
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 100
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 50
  WRT  0
  STC 99
  WRT  0
  STC 104
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 50
  WRT  0
  STC 56
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L14:
</int2char>
; --- Put CHARACTER
  WRT  0
</put>
<put>
<int2char>
  STC 10
  STC 10
; --- check 0 <= int <= 255
  DUP 
  STC  0
  GTE 
  JMF L15
  STC 255
  LTE 
  JMF L15
  JMP L16
L15:
; --- Write STRING "Value "
; --- Standard string writing
  STC 86
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 117
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  WRT  1
; --- Write STRING " invalid for int2char in line 28."
; --- Standard string writing
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 118
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 100
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 50
  WRT  0
  STC 99
  WRT  0
  STC 104
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 50
  WRT  0
  STC 56
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L16:
</int2char>
; --- Put CHARACTER
  WRT  0
</put>
  CSF 
</mostrar_instruction_block>
</procedure_mostrar>
<procedure_intercambiar>
L17:
; --- Simple parameter "i", type INT, class REF, level 1,  address [3]!
; --- Simple parameter "j", type INT, class REF, level 1,  address [4]!
<recover_argument_2>
; --- Recover simple val / ref variable parameter "j" (number 2).
  SRF  0  4
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover simple val / ref variable parameter "i" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L18
<constant_variable_declaration>
; --- Simple variable "k", type INT, level 1,  address [5]!
</constant_variable_declaration>
L18:
<intercambiar_instruction_block>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  5
; --- Constant / variable / parameter "i"
  SRF  0  3
  DRF 
  DRF 
  ASG 
</Assignment_to_simple_variable_k>
<Assignment_to_simple_variable_i>
; --- Address of variable / parameter "i"
  SRF  0  3
  DRF 
; --- Constant / variable / parameter "j"
  SRF  0  4
  DRF 
  DRF 
  ASG 
</Assignment_to_simple_variable_i>
<Assignment_to_simple_variable_j>
; --- Address of variable / parameter "j"
  SRF  0  4
  DRF 
; --- Constant / variable / parameter "k"
  SRF  0  5
  DRF 
  ASG 
</Assignment_to_simple_variable_j>
  CSF 
</intercambiar_instruction_block>
</procedure_intercambiar>
<procedure_ordenar>
L19:
; --- Simple parameter "i", type INT, class REF, level 1,  address [3]!
; --- Simple parameter "j", type INT, class REF, level 1,  address [4]!
<recover_argument_2>
; --- Recover simple val / ref variable parameter "j" (number 2).
  SRF  0  4
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover simple val / ref variable parameter "i" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L20
<constant_variable_declaration>
</constant_variable_declaration>
L20:
<ordenar_instruction_block>
<if-then>
<condition>
; --- Constant / variable / parameter "i"
  SRF  0  3
  DRF 
  DRF 
; --- Constant / variable / parameter "j"
  SRF  0  4
  DRF 
  DRF 
  GT 
</condition>
  JMF L21
<then>
<procedure_call_intercambiar>
; --- Procedure call intercambiar
<argument_1>
; --- Constant / variable / parameter "i"
  SRF  0  3
  DRF 
</argument_1>
<argument_2>
; --- Constant / variable / parameter "j"
  SRF  0  4
  DRF 
</argument_2>
  OSF  5  1 L17
</procedure_call_intercambiar>
</then>
L21:
</if-then>
  CSF 
</ordenar_instruction_block>
</procedure_ordenar>
<procedure_divide>
L22:
; --- Ref array parameter "t", type INT, class REF, size 20, level 1, address [3]!
; --- Simple parameter "izq", type INT, class VAL, level 1,  address [4]!
; --- Simple parameter "der", type INT, class VAL, level 1,  address [5]!
; --- Simple parameter "me", type INT, class REF, level 1,  address [6]!
<recover_argument_4>
; --- Recover simple val / ref variable parameter "me" (number 4).
  SRF  0  6
  ASGI 
</recover_argument_4>
<recover_argument_3>
; --- Recover simple val / ref variable parameter "der" (number 3).
  SRF  0  5
  ASGI 
</recover_argument_3>
<recover_argument_2>
; --- Recover simple val / ref variable parameter "izq" (number 2).
  SRF  0  4
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover array ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L23
<constant_variable_declaration>
; --- Simple variable "p", type INT, level 1,  address [7]!
; --- Simple variable "k", type INT, level 1,  address [8]!
</constant_variable_declaration>
L23:
<divide_instruction_block>
<Assignment_to_simple_variable_p>
; --- Address of variable / parameter "p"
  SRF  0  7
<component_of_array_t>
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L24
  DUP 
  STC 20
  LT 
  JMT L25
L24:
; --- Write STRING "Index out of bounds for array "t" in line 47."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 52
  WRT  0
  STC 55
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L25:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_t>
  ASG 
</Assignment_to_simple_variable_p>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  8
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  ASG 
</Assignment_to_simple_variable_k>
<Assignment_to_simple_variable_me>
; --- Address of variable / parameter "me"
  SRF  0  6
  DRF 
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_me>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  8
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_k>
<while>
L26:
<condition>
<component_of_array_t>
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L27
  DUP 
  STC 20
  LT 
  JMT L28
L27:
; --- Write STRING "Index out of bounds for array "t" in line 51."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 53
  WRT  0
  STC 49
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L28:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_t>
; --- Constant / variable / parameter "p"
  SRF  0  7
  DRF 
  LTE 
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
  LT 
  AND 
</condition>
  JMF L29
<while_instruction_block>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  8
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_k>
</while_instruction_block>
  JMP L26
L29:
</while>
<Assignment_to_simple_variable_me>
; --- Address of variable / parameter "me"
  SRF  0  6
  DRF 
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  1
  SBT 
  ASG 
</Assignment_to_simple_variable_me>
<while>
L30:
<condition>
<component_of_array_t>
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L31
  DUP 
  STC 20
  LT 
  JMT L32
L31:
; --- Write STRING "Index out of bounds for array "t" in line 55."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 53
  WRT  0
  STC 53
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L32:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_t>
; --- Constant / variable / parameter "p"
  SRF  0  7
  DRF 
  GT 
</condition>
  JMF L33
<while_instruction_block>
<Assignment_to_simple_variable_me>
; --- Address of variable / parameter "me"
  SRF  0  6
  DRF 
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  1
  SBT 
  ASG 
</Assignment_to_simple_variable_me>
</while_instruction_block>
  JMP L30
L33:
</while>
<while>
L34:
<condition>
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  LT 
</condition>
  JMF L35
<while_instruction_block>
<procedure_call_intercambiar>
; --- Procedure call intercambiar
<argument_1>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "i".
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L36
  DUP 
  STC 20
  LT 
  JMT L37
L36:
; --- Write STRING "Index out of bounds for array "t" in line 59."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 53
  WRT  0
  STC 57
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L37:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_1>
<argument_2>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "j".
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L38
  DUP 
  STC 20
  LT 
  JMT L39
L38:
; --- Write STRING "Index out of bounds for array "t" in line 59."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 53
  WRT  0
  STC 57
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L39:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_2>
  OSF  9  1 L17
</procedure_call_intercambiar>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  8
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_k>
<while>
L40:
<condition>
<component_of_array_t>
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L41
  DUP 
  STC 20
  LT 
  JMT L42
L41:
; --- Write STRING "Index out of bounds for array "t" in line 61."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 49
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L42:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_t>
; --- Constant / variable / parameter "p"
  SRF  0  7
  DRF 
  LTE 
</condition>
  JMF L43
<while_instruction_block>
<Assignment_to_simple_variable_k>
; --- Address of variable / parameter "k"
  SRF  0  8
; --- Constant / variable / parameter "k"
  SRF  0  8
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_k>
</while_instruction_block>
  JMP L40
L43:
</while>
<Assignment_to_simple_variable_me>
; --- Address of variable / parameter "me"
  SRF  0  6
  DRF 
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  1
  SBT 
  ASG 
</Assignment_to_simple_variable_me>
<while>
L44:
<condition>
<component_of_array_t>
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L45
  DUP 
  STC 20
  LT 
  JMT L46
L45:
; --- Write STRING "Index out of bounds for array "t" in line 65."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 53
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L46:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
  DRF 
</component_of_array_t>
; --- Constant / variable / parameter "p"
  SRF  0  7
  DRF 
  GT 
</condition>
  JMF L47
<while_instruction_block>
<Assignment_to_simple_variable_me>
; --- Address of variable / parameter "me"
  SRF  0  6
  DRF 
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  1
  SBT 
  ASG 
</Assignment_to_simple_variable_me>
</while_instruction_block>
  JMP L44
L47:
</while>
</while_instruction_block>
  JMP L34
L35:
</while>
<procedure_call_intercambiar>
; --- Procedure call intercambiar
<argument_1>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "i".
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L48
  DUP 
  STC 20
  LT 
  JMT L49
L48:
; --- Write STRING "Index out of bounds for array "t" in line 69."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 57
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L49:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_1>
<argument_2>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "j".
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L50
  DUP 
  STC 20
  LT 
  JMT L51
L50:
; --- Write STRING "Index out of bounds for array "t" in line 69."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 54
  WRT  0
  STC 57
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L51:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_2>
  OSF  9  1 L17
</procedure_call_intercambiar>
  CSF 
</divide_instruction_block>
</procedure_divide>
<procedure_quicksort>
L52:
; --- Ref array parameter "t", type INT, class REF, size 20, level 1, address [3]!
; --- Simple parameter "izq", type INT, class VAL, level 1,  address [4]!
; --- Simple parameter "der", type INT, class VAL, level 1,  address [5]!
<recover_argument_3>
; --- Recover simple val / ref variable parameter "der" (number 3).
  SRF  0  5
  ASGI 
</recover_argument_3>
<recover_argument_2>
; --- Recover simple val / ref variable parameter "izq" (number 2).
  SRF  0  4
  ASGI 
</recover_argument_2>
<recover_argument_1>
; --- Recover array ref variable parameter "t" (number 1).
  SRF  0  3
  ASGI 
</recover_argument_1>
  JMP L53
<constant_variable_declaration>
; --- Simple variable "me", type INT, level 1,  address [6]!
</constant_variable_declaration>
L53:
<quicksort_instruction_block>
<if-then>
<condition>
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  GT 
</condition>
  JMF L54
<then>
<procedure_call_mostrar>
; --- Procedure call mostrar
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  3
  DRF 
  STC  0
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  1
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  2
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  3
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  4
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  5
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  6
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  7
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  8
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC  9
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 10
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 11
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 12
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 13
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 14
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 15
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 16
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 17
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 18
  PLUS 
  DRF 
  SRF  0  3
  DRF 
  STC 19
  PLUS 
  DRF 
</argument_1>
  OSF  7  1 L7
</procedure_call_mostrar>
<if-then>
<condition>
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  SBT 
  STC  1
  EQ 
</condition>
  JMF L55
<then>
<procedure_call_ordenar>
; --- Procedure call ordenar
<argument_1>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "i".
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L56
  DUP 
  STC 20
  LT 
  JMT L57
L56:
; --- Write STRING "Index out of bounds for array "t" in line 77."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 55
  WRT  0
  STC 55
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L57:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_1>
<argument_2>
<component_of_array_t>
; --- Array component "t", passed as argument to ref parameter "j".
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
  STC  0
  SBT 
; --- Checking if index is valid for array "t"
  DUP 
  STC  0
  GTE 
  JMF L58
  DUP 
  STC 20
  LT 
  JMT L59
L58:
; --- Write STRING "Index out of bounds for array "t" in line 77."
; --- Standard string writing
  STC 73
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 120
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 102
  WRT  0
  STC 32
  WRT  0
  STC 98
  WRT  0
  STC 111
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 100
  WRT  0
  STC 115
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 121
  WRT  0
  STC 32
  WRT  0
  STC 34
  WRT  0
  STC 116
  WRT  0
  STC 34
  WRT  0
  STC 32
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 108
  WRT  0
  STC 105
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 32
  WRT  0
  STC 55
  WRT  0
  STC 55
  WRT  0
  STC 46
  WRT  0
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
  LVP 
L59:
; --- Initial ref address of array "t"
  SRF  0  3
  DRF 
  PLUS 
</component_of_array_t>
</argument_2>
  OSF  7  1 L19
</procedure_call_ordenar>
  JMP L60
</then>
<else>
L55:
<procedure_call_divide>
; --- Procedure call divide
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  3
  DRF 
</argument_1>
<argument_2>
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
</argument_2>
<argument_3>
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
</argument_3>
<argument_4>
; --- Constant / variable / parameter "me"
  SRF  0  6
</argument_4>
  OSF  7  1 L22
</procedure_call_divide>
<procedure_call_quicksort>
; --- Procedure call quicksort
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  3
  DRF 
</argument_1>
<argument_2>
; --- Constant / variable / parameter "izq"
  SRF  0  4
  DRF 
</argument_2>
<argument_3>
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  STC  1
  SBT 
</argument_3>
  OSF  7  1 L52
</procedure_call_quicksort>
<procedure_call_quicksort>
; --- Procedure call quicksort
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  3
  DRF 
</argument_1>
<argument_2>
; --- Constant / variable / parameter "me"
  SRF  0  6
  DRF 
  STC  1
  PLUS 
</argument_2>
<argument_3>
; --- Constant / variable / parameter "der"
  SRF  0  5
  DRF 
</argument_3>
  OSF  7  1 L52
</procedure_call_quicksort>
<Assignment_to_simple_variable_iteraciones>
; --- Address of variable / parameter "iteraciones"
  SRF  1  4
; --- Constant / variable / parameter "iteraciones"
  SRF  1  4
  DRF 
  STC  1
  PLUS 
  ASG 
</Assignment_to_simple_variable_iteraciones>
</else>
L60:
</if-then>
</then>
L54:
</if-then>
  CSF 
</quicksort_instruction_block>
</procedure_quicksort>
L0:
<qsort_instruction_block>
<put>
; --- Write STRING "Ilustración del funcionamiento del algoritmo quicksort para ordenar 20 enteros."
; --- Standard string writing
  STC 73
  WRT  0
  STC 108
  WRT  0
  STC 117
  WRT  0
  STC 115
  WRT  0
  STC 116
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 99
  WRT  0
  STC 105
  WRT  0
  STC -61
  WRT  0
  STC -77
  WRT  0
  STC 110
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 108
  WRT  0
  STC 32
  WRT  0
  STC 102
  WRT  0
  STC 117
  WRT  0
  STC 110
  WRT  0
  STC 99
  WRT  0
  STC 105
  WRT  0
  STC 111
  WRT  0
  STC 110
  WRT  0
  STC 97
  WRT  0
  STC 109
  WRT  0
  STC 105
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 111
  WRT  0
  STC 32
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 108
  WRT  0
  STC 32
  WRT  0
  STC 97
  WRT  0
  STC 108
  WRT  0
  STC 103
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 105
  WRT  0
  STC 116
  WRT  0
  STC 109
  WRT  0
  STC 111
  WRT  0
  STC 32
  WRT  0
  STC 113
  WRT  0
  STC 117
  WRT  0
  STC 105
  WRT  0
  STC 99
  WRT  0
  STC 107
  WRT  0
  STC 115
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 116
  WRT  0
  STC 32
  WRT  0
  STC 112
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 32
  WRT  0
  STC 111
  WRT  0
  STC 114
  WRT  0
  STC 100
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 97
  WRT  0
  STC 114
  WRT  0
  STC 32
  WRT  0
  STC 50
  WRT  0
  STC 48
  WRT  0
  STC 32
  WRT  0
  STC 101
  WRT  0
  STC 110
  WRT  0
  STC 116
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 111
  WRT  0
  STC 115
  WRT  0
  STC 46
  WRT  0
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Write STRING ""
; --- Standard string writing
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<Assignment_to_simple_variable_n>
; --- Address of variable / parameter "n"
  SRF  0  3
  STC 20
  ASG 
</Assignment_to_simple_variable_n>
<Assignment_to_simple_variable_iteraciones>
; --- Address of variable / parameter "iteraciones"
  SRF  0  4
  STC  0
  ASG 
</Assignment_to_simple_variable_iteraciones>
<procedure_call_inicializar>
; --- Procedure call inicializar
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  5
</argument_1>
  OSF 25  0 L1
</procedure_call_inicializar>
<procedure_call_quicksort>
; --- Procedure call quicksort
<argument_1>
; --- Constant / variable / parameter "t"
  SRF  0  5
</argument_1>
<argument_2>
  STC  0
</argument_2>
<argument_3>
; --- Constant / variable / parameter "n"
  SRF  0  3
  DRF 
  STC  1
  SBT 
</argument_3>
  OSF 25  0 L52
</procedure_call_quicksort>
<put>
; --- Write STRING ""
; --- Standard string writing
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
<put>
; --- Write STRING "Iteraciones: "
; --- Standard string writing
  STC 73
  WRT  0
  STC 116
  WRT  0
  STC 101
  WRT  0
  STC 114
  WRT  0
  STC 97
  WRT  0
  STC 99
  WRT  0
  STC 105
  WRT  0
  STC 111
  WRT  0
  STC 110
  WRT  0
  STC 101
  WRT  0
  STC 115
  WRT  0
  STC 58
  WRT  0
  STC 32
  WRT  0
</put>
<put>
; --- Constant / variable / parameter "iteraciones"
  SRF  0  4
  DRF 
; --- Put INTEGER
  WRT  1
</put>
<put_line>
; --- CR/LF
  STC 13
  WRT  0
  STC 10
  WRT  0
</put_line>
</qsort_instruction_block>
  LVP 
</qsort>
